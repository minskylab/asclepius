// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/google/uuid"
	"github.com/minskylab/asclepius/ent/migrate"

	"github.com/minskylab/asclepius/ent/alert"
	"github.com/minskylab/asclepius/ent/clinicalresults"
	"github.com/minskylab/asclepius/ent/doctor"
	"github.com/minskylab/asclepius/ent/epidemiologicresults"
	"github.com/minskylab/asclepius/ent/history"
	"github.com/minskylab/asclepius/ent/medicalnote"
	"github.com/minskylab/asclepius/ent/patient"
	"github.com/minskylab/asclepius/ent/schedule"
	"github.com/minskylab/asclepius/ent/task"
	"github.com/minskylab/asclepius/ent/taskresponse"
	"github.com/minskylab/asclepius/ent/test"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Alert is the client for interacting with the Alert builders.
	Alert *AlertClient
	// ClinicalResults is the client for interacting with the ClinicalResults builders.
	ClinicalResults *ClinicalResultsClient
	// Doctor is the client for interacting with the Doctor builders.
	Doctor *DoctorClient
	// EpidemiologicResults is the client for interacting with the EpidemiologicResults builders.
	EpidemiologicResults *EpidemiologicResultsClient
	// History is the client for interacting with the History builders.
	History *HistoryClient
	// MedicalNote is the client for interacting with the MedicalNote builders.
	MedicalNote *MedicalNoteClient
	// Patient is the client for interacting with the Patient builders.
	Patient *PatientClient
	// Schedule is the client for interacting with the Schedule builders.
	Schedule *ScheduleClient
	// Task is the client for interacting with the Task builders.
	Task *TaskClient
	// TaskResponse is the client for interacting with the TaskResponse builders.
	TaskResponse *TaskResponseClient
	// Test is the client for interacting with the Test builders.
	Test *TestClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	c := config{log: log.Println}
	c.options(opts...)
	return &Client{
		config:               c,
		Schema:               migrate.NewSchema(c.driver),
		Alert:                NewAlertClient(c),
		ClinicalResults:      NewClinicalResultsClient(c),
		Doctor:               NewDoctorClient(c),
		EpidemiologicResults: NewEpidemiologicResultsClient(c),
		History:              NewHistoryClient(c),
		MedicalNote:          NewMedicalNoteClient(c),
		Patient:              NewPatientClient(c),
		Schedule:             NewScheduleClient(c),
		Task:                 NewTaskClient(c),
		TaskResponse:         NewTaskResponseClient(c),
		Test:                 NewTestClient(c),
	}
}

// Open opens a connection to the database specified by the driver name and a
// driver-specific data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug}
	return &Tx{
		config:               cfg,
		Alert:                NewAlertClient(cfg),
		ClinicalResults:      NewClinicalResultsClient(cfg),
		Doctor:               NewDoctorClient(cfg),
		EpidemiologicResults: NewEpidemiologicResultsClient(cfg),
		History:              NewHistoryClient(cfg),
		MedicalNote:          NewMedicalNoteClient(cfg),
		Patient:              NewPatientClient(cfg),
		Schedule:             NewScheduleClient(cfg),
		Task:                 NewTaskClient(cfg),
		TaskResponse:         NewTaskResponseClient(cfg),
		Test:                 NewTestClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Alert.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true}
	return &Client{
		config:               cfg,
		Schema:               migrate.NewSchema(cfg.driver),
		Alert:                NewAlertClient(cfg),
		ClinicalResults:      NewClinicalResultsClient(cfg),
		Doctor:               NewDoctorClient(cfg),
		EpidemiologicResults: NewEpidemiologicResultsClient(cfg),
		History:              NewHistoryClient(cfg),
		MedicalNote:          NewMedicalNoteClient(cfg),
		Patient:              NewPatientClient(cfg),
		Schedule:             NewScheduleClient(cfg),
		Task:                 NewTaskClient(cfg),
		TaskResponse:         NewTaskResponseClient(cfg),
		Test:                 NewTestClient(cfg),
	}
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// AlertClient is a client for the Alert schema.
type AlertClient struct {
	config
}

// NewAlertClient returns a client for the Alert from the given config.
func NewAlertClient(c config) *AlertClient {
	return &AlertClient{config: c}
}

// Create returns a create builder for Alert.
func (c *AlertClient) Create() *AlertCreate {
	return &AlertCreate{config: c.config}
}

// Update returns an update builder for Alert.
func (c *AlertClient) Update() *AlertUpdate {
	return &AlertUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *AlertClient) UpdateOne(a *Alert) *AlertUpdateOne {
	return c.UpdateOneID(a.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *AlertClient) UpdateOneID(id int) *AlertUpdateOne {
	return &AlertUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for Alert.
func (c *AlertClient) Delete() *AlertDelete {
	return &AlertDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AlertClient) DeleteOne(a *Alert) *AlertDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AlertClient) DeleteOneID(id int) *AlertDeleteOne {
	return &AlertDeleteOne{c.Delete().Where(alert.ID(id))}
}

// Create returns a query builder for Alert.
func (c *AlertClient) Query() *AlertQuery {
	return &AlertQuery{config: c.config}
}

// Get returns a Alert entity by its id.
func (c *AlertClient) Get(ctx context.Context, id int) (*Alert, error) {
	return c.Query().Where(alert.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AlertClient) GetX(ctx context.Context, id int) *Alert {
	a, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return a
}

// ClinicalResultsClient is a client for the ClinicalResults schema.
type ClinicalResultsClient struct {
	config
}

// NewClinicalResultsClient returns a client for the ClinicalResults from the given config.
func NewClinicalResultsClient(c config) *ClinicalResultsClient {
	return &ClinicalResultsClient{config: c}
}

// Create returns a create builder for ClinicalResults.
func (c *ClinicalResultsClient) Create() *ClinicalResultsCreate {
	return &ClinicalResultsCreate{config: c.config}
}

// Update returns an update builder for ClinicalResults.
func (c *ClinicalResultsClient) Update() *ClinicalResultsUpdate {
	return &ClinicalResultsUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *ClinicalResultsClient) UpdateOne(cr *ClinicalResults) *ClinicalResultsUpdateOne {
	return c.UpdateOneID(cr.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *ClinicalResultsClient) UpdateOneID(id uuid.UUID) *ClinicalResultsUpdateOne {
	return &ClinicalResultsUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for ClinicalResults.
func (c *ClinicalResultsClient) Delete() *ClinicalResultsDelete {
	return &ClinicalResultsDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ClinicalResultsClient) DeleteOne(cr *ClinicalResults) *ClinicalResultsDeleteOne {
	return c.DeleteOneID(cr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ClinicalResultsClient) DeleteOneID(id uuid.UUID) *ClinicalResultsDeleteOne {
	return &ClinicalResultsDeleteOne{c.Delete().Where(clinicalresults.ID(id))}
}

// Create returns a query builder for ClinicalResults.
func (c *ClinicalResultsClient) Query() *ClinicalResultsQuery {
	return &ClinicalResultsQuery{config: c.config}
}

// Get returns a ClinicalResults entity by its id.
func (c *ClinicalResultsClient) Get(ctx context.Context, id uuid.UUID) (*ClinicalResults, error) {
	return c.Query().Where(clinicalresults.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ClinicalResultsClient) GetX(ctx context.Context, id uuid.UUID) *ClinicalResults {
	cr, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return cr
}

// QueryTest queries the test edge of a ClinicalResults.
func (c *ClinicalResultsClient) QueryTest(cr *ClinicalResults) *TestQuery {
	query := &TestQuery{config: c.config}
	id := cr.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(clinicalresults.Table, clinicalresults.FieldID, id),
		sqlgraph.To(test.Table, test.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, clinicalresults.TestTable, clinicalresults.TestColumn),
	)
	query.sql = sqlgraph.Neighbors(cr.driver.Dialect(), step)

	return query
}

// DoctorClient is a client for the Doctor schema.
type DoctorClient struct {
	config
}

// NewDoctorClient returns a client for the Doctor from the given config.
func NewDoctorClient(c config) *DoctorClient {
	return &DoctorClient{config: c}
}

// Create returns a create builder for Doctor.
func (c *DoctorClient) Create() *DoctorCreate {
	return &DoctorCreate{config: c.config}
}

// Update returns an update builder for Doctor.
func (c *DoctorClient) Update() *DoctorUpdate {
	return &DoctorUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *DoctorClient) UpdateOne(d *Doctor) *DoctorUpdateOne {
	return c.UpdateOneID(d.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *DoctorClient) UpdateOneID(id uuid.UUID) *DoctorUpdateOne {
	return &DoctorUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for Doctor.
func (c *DoctorClient) Delete() *DoctorDelete {
	return &DoctorDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DoctorClient) DeleteOne(d *Doctor) *DoctorDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DoctorClient) DeleteOneID(id uuid.UUID) *DoctorDeleteOne {
	return &DoctorDeleteOne{c.Delete().Where(doctor.ID(id))}
}

// Create returns a query builder for Doctor.
func (c *DoctorClient) Query() *DoctorQuery {
	return &DoctorQuery{config: c.config}
}

// Get returns a Doctor entity by its id.
func (c *DoctorClient) Get(ctx context.Context, id uuid.UUID) (*Doctor, error) {
	return c.Query().Where(doctor.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DoctorClient) GetX(ctx context.Context, id uuid.UUID) *Doctor {
	d, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return d
}

// QueryNotes queries the notes edge of a Doctor.
func (c *DoctorClient) QueryNotes(d *Doctor) *MedicalNoteQuery {
	query := &MedicalNoteQuery{config: c.config}
	id := d.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(doctor.Table, doctor.FieldID, id),
		sqlgraph.To(medicalnote.Table, medicalnote.FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, doctor.NotesTable, doctor.NotesColumn),
	)
	query.sql = sqlgraph.Neighbors(d.driver.Dialect(), step)

	return query
}

// QueryResponses queries the responses edge of a Doctor.
func (c *DoctorClient) QueryResponses(d *Doctor) *TaskResponseQuery {
	query := &TaskResponseQuery{config: c.config}
	id := d.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(doctor.Table, doctor.FieldID, id),
		sqlgraph.To(taskresponse.Table, taskresponse.FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, doctor.ResponsesTable, doctor.ResponsesColumn),
	)
	query.sql = sqlgraph.Neighbors(d.driver.Dialect(), step)

	return query
}

// QueryTasks queries the tasks edge of a Doctor.
func (c *DoctorClient) QueryTasks(d *Doctor) *TaskQuery {
	query := &TaskQuery{config: c.config}
	id := d.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(doctor.Table, doctor.FieldID, id),
		sqlgraph.To(task.Table, task.FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, doctor.TasksTable, doctor.TasksPrimaryKey...),
	)
	query.sql = sqlgraph.Neighbors(d.driver.Dialect(), step)

	return query
}

// EpidemiologicResultsClient is a client for the EpidemiologicResults schema.
type EpidemiologicResultsClient struct {
	config
}

// NewEpidemiologicResultsClient returns a client for the EpidemiologicResults from the given config.
func NewEpidemiologicResultsClient(c config) *EpidemiologicResultsClient {
	return &EpidemiologicResultsClient{config: c}
}

// Create returns a create builder for EpidemiologicResults.
func (c *EpidemiologicResultsClient) Create() *EpidemiologicResultsCreate {
	return &EpidemiologicResultsCreate{config: c.config}
}

// Update returns an update builder for EpidemiologicResults.
func (c *EpidemiologicResultsClient) Update() *EpidemiologicResultsUpdate {
	return &EpidemiologicResultsUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *EpidemiologicResultsClient) UpdateOne(er *EpidemiologicResults) *EpidemiologicResultsUpdateOne {
	return c.UpdateOneID(er.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *EpidemiologicResultsClient) UpdateOneID(id uuid.UUID) *EpidemiologicResultsUpdateOne {
	return &EpidemiologicResultsUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for EpidemiologicResults.
func (c *EpidemiologicResultsClient) Delete() *EpidemiologicResultsDelete {
	return &EpidemiologicResultsDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *EpidemiologicResultsClient) DeleteOne(er *EpidemiologicResults) *EpidemiologicResultsDeleteOne {
	return c.DeleteOneID(er.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *EpidemiologicResultsClient) DeleteOneID(id uuid.UUID) *EpidemiologicResultsDeleteOne {
	return &EpidemiologicResultsDeleteOne{c.Delete().Where(epidemiologicresults.ID(id))}
}

// Create returns a query builder for EpidemiologicResults.
func (c *EpidemiologicResultsClient) Query() *EpidemiologicResultsQuery {
	return &EpidemiologicResultsQuery{config: c.config}
}

// Get returns a EpidemiologicResults entity by its id.
func (c *EpidemiologicResultsClient) Get(ctx context.Context, id uuid.UUID) (*EpidemiologicResults, error) {
	return c.Query().Where(epidemiologicresults.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EpidemiologicResultsClient) GetX(ctx context.Context, id uuid.UUID) *EpidemiologicResults {
	er, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return er
}

// QueryTest queries the test edge of a EpidemiologicResults.
func (c *EpidemiologicResultsClient) QueryTest(er *EpidemiologicResults) *TestQuery {
	query := &TestQuery{config: c.config}
	id := er.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(epidemiologicresults.Table, epidemiologicresults.FieldID, id),
		sqlgraph.To(test.Table, test.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, epidemiologicresults.TestTable, epidemiologicresults.TestColumn),
	)
	query.sql = sqlgraph.Neighbors(er.driver.Dialect(), step)

	return query
}

// HistoryClient is a client for the History schema.
type HistoryClient struct {
	config
}

// NewHistoryClient returns a client for the History from the given config.
func NewHistoryClient(c config) *HistoryClient {
	return &HistoryClient{config: c}
}

// Create returns a create builder for History.
func (c *HistoryClient) Create() *HistoryCreate {
	return &HistoryCreate{config: c.config}
}

// Update returns an update builder for History.
func (c *HistoryClient) Update() *HistoryUpdate {
	return &HistoryUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *HistoryClient) UpdateOne(h *History) *HistoryUpdateOne {
	return c.UpdateOneID(h.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *HistoryClient) UpdateOneID(id uuid.UUID) *HistoryUpdateOne {
	return &HistoryUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for History.
func (c *HistoryClient) Delete() *HistoryDelete {
	return &HistoryDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *HistoryClient) DeleteOne(h *History) *HistoryDeleteOne {
	return c.DeleteOneID(h.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *HistoryClient) DeleteOneID(id uuid.UUID) *HistoryDeleteOne {
	return &HistoryDeleteOne{c.Delete().Where(history.ID(id))}
}

// Create returns a query builder for History.
func (c *HistoryClient) Query() *HistoryQuery {
	return &HistoryQuery{config: c.config}
}

// Get returns a History entity by its id.
func (c *HistoryClient) Get(ctx context.Context, id uuid.UUID) (*History, error) {
	return c.Query().Where(history.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HistoryClient) GetX(ctx context.Context, id uuid.UUID) *History {
	h, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return h
}

// QueryPatient queries the patient edge of a History.
func (c *HistoryClient) QueryPatient(h *History) *PatientQuery {
	query := &PatientQuery{config: c.config}
	id := h.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(history.Table, history.FieldID, id),
		sqlgraph.To(patient.Table, patient.FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, history.PatientTable, history.PatientColumn),
	)
	query.sql = sqlgraph.Neighbors(h.driver.Dialect(), step)

	return query
}

// QueryTests queries the tests edge of a History.
func (c *HistoryClient) QueryTests(h *History) *TestQuery {
	query := &TestQuery{config: c.config}
	id := h.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(history.Table, history.FieldID, id),
		sqlgraph.To(test.Table, test.FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, history.TestsTable, history.TestsColumn),
	)
	query.sql = sqlgraph.Neighbors(h.driver.Dialect(), step)

	return query
}

// QueryNotes queries the notes edge of a History.
func (c *HistoryClient) QueryNotes(h *History) *MedicalNoteQuery {
	query := &MedicalNoteQuery{config: c.config}
	id := h.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(history.Table, history.FieldID, id),
		sqlgraph.To(medicalnote.Table, medicalnote.FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, history.NotesTable, history.NotesColumn),
	)
	query.sql = sqlgraph.Neighbors(h.driver.Dialect(), step)

	return query
}

// MedicalNoteClient is a client for the MedicalNote schema.
type MedicalNoteClient struct {
	config
}

// NewMedicalNoteClient returns a client for the MedicalNote from the given config.
func NewMedicalNoteClient(c config) *MedicalNoteClient {
	return &MedicalNoteClient{config: c}
}

// Create returns a create builder for MedicalNote.
func (c *MedicalNoteClient) Create() *MedicalNoteCreate {
	return &MedicalNoteCreate{config: c.config}
}

// Update returns an update builder for MedicalNote.
func (c *MedicalNoteClient) Update() *MedicalNoteUpdate {
	return &MedicalNoteUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *MedicalNoteClient) UpdateOne(mn *MedicalNote) *MedicalNoteUpdateOne {
	return c.UpdateOneID(mn.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *MedicalNoteClient) UpdateOneID(id uuid.UUID) *MedicalNoteUpdateOne {
	return &MedicalNoteUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for MedicalNote.
func (c *MedicalNoteClient) Delete() *MedicalNoteDelete {
	return &MedicalNoteDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MedicalNoteClient) DeleteOne(mn *MedicalNote) *MedicalNoteDeleteOne {
	return c.DeleteOneID(mn.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MedicalNoteClient) DeleteOneID(id uuid.UUID) *MedicalNoteDeleteOne {
	return &MedicalNoteDeleteOne{c.Delete().Where(medicalnote.ID(id))}
}

// Create returns a query builder for MedicalNote.
func (c *MedicalNoteClient) Query() *MedicalNoteQuery {
	return &MedicalNoteQuery{config: c.config}
}

// Get returns a MedicalNote entity by its id.
func (c *MedicalNoteClient) Get(ctx context.Context, id uuid.UUID) (*MedicalNote, error) {
	return c.Query().Where(medicalnote.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MedicalNoteClient) GetX(ctx context.Context, id uuid.UUID) *MedicalNote {
	mn, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return mn
}

// QueryHistory queries the history edge of a MedicalNote.
func (c *MedicalNoteClient) QueryHistory(mn *MedicalNote) *HistoryQuery {
	query := &HistoryQuery{config: c.config}
	id := mn.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(medicalnote.Table, medicalnote.FieldID, id),
		sqlgraph.To(history.Table, history.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, medicalnote.HistoryTable, medicalnote.HistoryColumn),
	)
	query.sql = sqlgraph.Neighbors(mn.driver.Dialect(), step)

	return query
}

// QueryOwner queries the owner edge of a MedicalNote.
func (c *MedicalNoteClient) QueryOwner(mn *MedicalNote) *DoctorQuery {
	query := &DoctorQuery{config: c.config}
	id := mn.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(medicalnote.Table, medicalnote.FieldID, id),
		sqlgraph.To(doctor.Table, doctor.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, medicalnote.OwnerTable, medicalnote.OwnerColumn),
	)
	query.sql = sqlgraph.Neighbors(mn.driver.Dialect(), step)

	return query
}

// PatientClient is a client for the Patient schema.
type PatientClient struct {
	config
}

// NewPatientClient returns a client for the Patient from the given config.
func NewPatientClient(c config) *PatientClient {
	return &PatientClient{config: c}
}

// Create returns a create builder for Patient.
func (c *PatientClient) Create() *PatientCreate {
	return &PatientCreate{config: c.config}
}

// Update returns an update builder for Patient.
func (c *PatientClient) Update() *PatientUpdate {
	return &PatientUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *PatientClient) UpdateOne(pa *Patient) *PatientUpdateOne {
	return c.UpdateOneID(pa.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *PatientClient) UpdateOneID(id uuid.UUID) *PatientUpdateOne {
	return &PatientUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for Patient.
func (c *PatientClient) Delete() *PatientDelete {
	return &PatientDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PatientClient) DeleteOne(pa *Patient) *PatientDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PatientClient) DeleteOneID(id uuid.UUID) *PatientDeleteOne {
	return &PatientDeleteOne{c.Delete().Where(patient.ID(id))}
}

// Create returns a query builder for Patient.
func (c *PatientClient) Query() *PatientQuery {
	return &PatientQuery{config: c.config}
}

// Get returns a Patient entity by its id.
func (c *PatientClient) Get(ctx context.Context, id uuid.UUID) (*Patient, error) {
	return c.Query().Where(patient.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PatientClient) GetX(ctx context.Context, id uuid.UUID) *Patient {
	pa, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return pa
}

// QueryHistory queries the history edge of a Patient.
func (c *PatientClient) QueryHistory(pa *Patient) *HistoryQuery {
	query := &HistoryQuery{config: c.config}
	id := pa.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(patient.Table, patient.FieldID, id),
		sqlgraph.To(history.Table, history.FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, patient.HistoryTable, patient.HistoryColumn),
	)
	query.sql = sqlgraph.Neighbors(pa.driver.Dialect(), step)

	return query
}

// QuerySchedule queries the schedule edge of a Patient.
func (c *PatientClient) QuerySchedule(pa *Patient) *ScheduleQuery {
	query := &ScheduleQuery{config: c.config}
	id := pa.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(patient.Table, patient.FieldID, id),
		sqlgraph.To(schedule.Table, schedule.FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, patient.ScheduleTable, patient.ScheduleColumn),
	)
	query.sql = sqlgraph.Neighbors(pa.driver.Dialect(), step)

	return query
}

// ScheduleClient is a client for the Schedule schema.
type ScheduleClient struct {
	config
}

// NewScheduleClient returns a client for the Schedule from the given config.
func NewScheduleClient(c config) *ScheduleClient {
	return &ScheduleClient{config: c}
}

// Create returns a create builder for Schedule.
func (c *ScheduleClient) Create() *ScheduleCreate {
	return &ScheduleCreate{config: c.config}
}

// Update returns an update builder for Schedule.
func (c *ScheduleClient) Update() *ScheduleUpdate {
	return &ScheduleUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *ScheduleClient) UpdateOne(s *Schedule) *ScheduleUpdateOne {
	return c.UpdateOneID(s.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *ScheduleClient) UpdateOneID(id uuid.UUID) *ScheduleUpdateOne {
	return &ScheduleUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for Schedule.
func (c *ScheduleClient) Delete() *ScheduleDelete {
	return &ScheduleDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ScheduleClient) DeleteOne(s *Schedule) *ScheduleDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ScheduleClient) DeleteOneID(id uuid.UUID) *ScheduleDeleteOne {
	return &ScheduleDeleteOne{c.Delete().Where(schedule.ID(id))}
}

// Create returns a query builder for Schedule.
func (c *ScheduleClient) Query() *ScheduleQuery {
	return &ScheduleQuery{config: c.config}
}

// Get returns a Schedule entity by its id.
func (c *ScheduleClient) Get(ctx context.Context, id uuid.UUID) (*Schedule, error) {
	return c.Query().Where(schedule.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ScheduleClient) GetX(ctx context.Context, id uuid.UUID) *Schedule {
	s, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return s
}

// QueryTasks queries the tasks edge of a Schedule.
func (c *ScheduleClient) QueryTasks(s *Schedule) *TaskQuery {
	query := &TaskQuery{config: c.config}
	id := s.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(schedule.Table, schedule.FieldID, id),
		sqlgraph.To(task.Table, task.FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, schedule.TasksTable, schedule.TasksColumn),
	)
	query.sql = sqlgraph.Neighbors(s.driver.Dialect(), step)

	return query
}

// QueryPatient queries the patient edge of a Schedule.
func (c *ScheduleClient) QueryPatient(s *Schedule) *PatientQuery {
	query := &PatientQuery{config: c.config}
	id := s.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(schedule.Table, schedule.FieldID, id),
		sqlgraph.To(patient.Table, patient.FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, schedule.PatientTable, schedule.PatientColumn),
	)
	query.sql = sqlgraph.Neighbors(s.driver.Dialect(), step)

	return query
}

// TaskClient is a client for the Task schema.
type TaskClient struct {
	config
}

// NewTaskClient returns a client for the Task from the given config.
func NewTaskClient(c config) *TaskClient {
	return &TaskClient{config: c}
}

// Create returns a create builder for Task.
func (c *TaskClient) Create() *TaskCreate {
	return &TaskCreate{config: c.config}
}

// Update returns an update builder for Task.
func (c *TaskClient) Update() *TaskUpdate {
	return &TaskUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *TaskClient) UpdateOne(t *Task) *TaskUpdateOne {
	return c.UpdateOneID(t.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *TaskClient) UpdateOneID(id uuid.UUID) *TaskUpdateOne {
	return &TaskUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for Task.
func (c *TaskClient) Delete() *TaskDelete {
	return &TaskDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TaskClient) DeleteOne(t *Task) *TaskDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TaskClient) DeleteOneID(id uuid.UUID) *TaskDeleteOne {
	return &TaskDeleteOne{c.Delete().Where(task.ID(id))}
}

// Create returns a query builder for Task.
func (c *TaskClient) Query() *TaskQuery {
	return &TaskQuery{config: c.config}
}

// Get returns a Task entity by its id.
func (c *TaskClient) Get(ctx context.Context, id uuid.UUID) (*Task, error) {
	return c.Query().Where(task.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TaskClient) GetX(ctx context.Context, id uuid.UUID) *Task {
	t, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return t
}

// QueryResponsible queries the responsible edge of a Task.
func (c *TaskClient) QueryResponsible(t *Task) *DoctorQuery {
	query := &DoctorQuery{config: c.config}
	id := t.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(task.Table, task.FieldID, id),
		sqlgraph.To(doctor.Table, doctor.FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, task.ResponsibleTable, task.ResponsiblePrimaryKey...),
	)
	query.sql = sqlgraph.Neighbors(t.driver.Dialect(), step)

	return query
}

// QueryResponses queries the responses edge of a Task.
func (c *TaskClient) QueryResponses(t *Task) *TaskResponseQuery {
	query := &TaskResponseQuery{config: c.config}
	id := t.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(task.Table, task.FieldID, id),
		sqlgraph.To(taskresponse.Table, taskresponse.FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, task.ResponsesTable, task.ResponsesColumn),
	)
	query.sql = sqlgraph.Neighbors(t.driver.Dialect(), step)

	return query
}

// QuerySchedule queries the schedule edge of a Task.
func (c *TaskClient) QuerySchedule(t *Task) *ScheduleQuery {
	query := &ScheduleQuery{config: c.config}
	id := t.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(task.Table, task.FieldID, id),
		sqlgraph.To(schedule.Table, schedule.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, task.ScheduleTable, task.ScheduleColumn),
	)
	query.sql = sqlgraph.Neighbors(t.driver.Dialect(), step)

	return query
}

// TaskResponseClient is a client for the TaskResponse schema.
type TaskResponseClient struct {
	config
}

// NewTaskResponseClient returns a client for the TaskResponse from the given config.
func NewTaskResponseClient(c config) *TaskResponseClient {
	return &TaskResponseClient{config: c}
}

// Create returns a create builder for TaskResponse.
func (c *TaskResponseClient) Create() *TaskResponseCreate {
	return &TaskResponseCreate{config: c.config}
}

// Update returns an update builder for TaskResponse.
func (c *TaskResponseClient) Update() *TaskResponseUpdate {
	return &TaskResponseUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *TaskResponseClient) UpdateOne(tr *TaskResponse) *TaskResponseUpdateOne {
	return c.UpdateOneID(tr.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *TaskResponseClient) UpdateOneID(id uuid.UUID) *TaskResponseUpdateOne {
	return &TaskResponseUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for TaskResponse.
func (c *TaskResponseClient) Delete() *TaskResponseDelete {
	return &TaskResponseDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TaskResponseClient) DeleteOne(tr *TaskResponse) *TaskResponseDeleteOne {
	return c.DeleteOneID(tr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TaskResponseClient) DeleteOneID(id uuid.UUID) *TaskResponseDeleteOne {
	return &TaskResponseDeleteOne{c.Delete().Where(taskresponse.ID(id))}
}

// Create returns a query builder for TaskResponse.
func (c *TaskResponseClient) Query() *TaskResponseQuery {
	return &TaskResponseQuery{config: c.config}
}

// Get returns a TaskResponse entity by its id.
func (c *TaskResponseClient) Get(ctx context.Context, id uuid.UUID) (*TaskResponse, error) {
	return c.Query().Where(taskresponse.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TaskResponseClient) GetX(ctx context.Context, id uuid.UUID) *TaskResponse {
	tr, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return tr
}

// QueryAuthor queries the author edge of a TaskResponse.
func (c *TaskResponseClient) QueryAuthor(tr *TaskResponse) *DoctorQuery {
	query := &DoctorQuery{config: c.config}
	id := tr.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(taskresponse.Table, taskresponse.FieldID, id),
		sqlgraph.To(doctor.Table, doctor.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, taskresponse.AuthorTable, taskresponse.AuthorColumn),
	)
	query.sql = sqlgraph.Neighbors(tr.driver.Dialect(), step)

	return query
}

// QueryTask queries the task edge of a TaskResponse.
func (c *TaskResponseClient) QueryTask(tr *TaskResponse) *TaskQuery {
	query := &TaskQuery{config: c.config}
	id := tr.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(taskresponse.Table, taskresponse.FieldID, id),
		sqlgraph.To(task.Table, task.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, taskresponse.TaskTable, taskresponse.TaskColumn),
	)
	query.sql = sqlgraph.Neighbors(tr.driver.Dialect(), step)

	return query
}

// TestClient is a client for the Test schema.
type TestClient struct {
	config
}

// NewTestClient returns a client for the Test from the given config.
func NewTestClient(c config) *TestClient {
	return &TestClient{config: c}
}

// Create returns a create builder for Test.
func (c *TestClient) Create() *TestCreate {
	return &TestCreate{config: c.config}
}

// Update returns an update builder for Test.
func (c *TestClient) Update() *TestUpdate {
	return &TestUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *TestClient) UpdateOne(t *Test) *TestUpdateOne {
	return c.UpdateOneID(t.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *TestClient) UpdateOneID(id uuid.UUID) *TestUpdateOne {
	return &TestUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for Test.
func (c *TestClient) Delete() *TestDelete {
	return &TestDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TestClient) DeleteOne(t *Test) *TestDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TestClient) DeleteOneID(id uuid.UUID) *TestDeleteOne {
	return &TestDeleteOne{c.Delete().Where(test.ID(id))}
}

// Create returns a query builder for Test.
func (c *TestClient) Query() *TestQuery {
	return &TestQuery{config: c.config}
}

// Get returns a Test entity by its id.
func (c *TestClient) Get(ctx context.Context, id uuid.UUID) (*Test, error) {
	return c.Query().Where(test.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TestClient) GetX(ctx context.Context, id uuid.UUID) *Test {
	t, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return t
}

// QueryHistory queries the history edge of a Test.
func (c *TestClient) QueryHistory(t *Test) *HistoryQuery {
	query := &HistoryQuery{config: c.config}
	id := t.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(test.Table, test.FieldID, id),
		sqlgraph.To(history.Table, history.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, test.HistoryTable, test.HistoryColumn),
	)
	query.sql = sqlgraph.Neighbors(t.driver.Dialect(), step)

	return query
}

// QueryClinical queries the clinical edge of a Test.
func (c *TestClient) QueryClinical(t *Test) *ClinicalResultsQuery {
	query := &ClinicalResultsQuery{config: c.config}
	id := t.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(test.Table, test.FieldID, id),
		sqlgraph.To(clinicalresults.Table, clinicalresults.FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, test.ClinicalTable, test.ClinicalColumn),
	)
	query.sql = sqlgraph.Neighbors(t.driver.Dialect(), step)

	return query
}

// QueryEpidemiologic queries the epidemiologic edge of a Test.
func (c *TestClient) QueryEpidemiologic(t *Test) *EpidemiologicResultsQuery {
	query := &EpidemiologicResultsQuery{config: c.config}
	id := t.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(test.Table, test.FieldID, id),
		sqlgraph.To(epidemiologicresults.Table, epidemiologicresults.FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, test.EpidemiologicTable, test.EpidemiologicColumn),
	)
	query.sql = sqlgraph.Neighbors(t.driver.Dialect(), step)

	return query
}
