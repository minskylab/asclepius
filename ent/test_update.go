// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/google/uuid"
	"github.com/minskylab/asclepius/ent/clinicalresults"
	"github.com/minskylab/asclepius/ent/epidemiologicresults"
	"github.com/minskylab/asclepius/ent/history"
	"github.com/minskylab/asclepius/ent/predicate"
	"github.com/minskylab/asclepius/ent/test"
)

// TestUpdate is the builder for updating Test entities.
type TestUpdate struct {
	config
	notes                *[]string
	clearnotes           bool
	history              map[uuid.UUID]struct{}
	clinical             map[uuid.UUID]struct{}
	epidemiologic        map[uuid.UUID]struct{}
	clearedHistory       bool
	removedClinical      map[uuid.UUID]struct{}
	removedEpidemiologic map[uuid.UUID]struct{}
	predicates           []predicate.Test
}

// Where adds a new predicate for the builder.
func (tu *TestUpdate) Where(ps ...predicate.Test) *TestUpdate {
	tu.predicates = append(tu.predicates, ps...)
	return tu
}

// SetNotes sets the notes field.
func (tu *TestUpdate) SetNotes(s []string) *TestUpdate {
	tu.notes = &s
	return tu
}

// ClearNotes clears the value of notes.
func (tu *TestUpdate) ClearNotes() *TestUpdate {
	tu.notes = nil
	tu.clearnotes = true
	return tu
}

// SetHistoryID sets the history edge to History by id.
func (tu *TestUpdate) SetHistoryID(id uuid.UUID) *TestUpdate {
	if tu.history == nil {
		tu.history = make(map[uuid.UUID]struct{})
	}
	tu.history[id] = struct{}{}
	return tu
}

// SetNillableHistoryID sets the history edge to History by id if the given value is not nil.
func (tu *TestUpdate) SetNillableHistoryID(id *uuid.UUID) *TestUpdate {
	if id != nil {
		tu = tu.SetHistoryID(*id)
	}
	return tu
}

// SetHistory sets the history edge to History.
func (tu *TestUpdate) SetHistory(h *History) *TestUpdate {
	return tu.SetHistoryID(h.ID)
}

// AddClinicalIDs adds the clinical edge to ClinicalResults by ids.
func (tu *TestUpdate) AddClinicalIDs(ids ...uuid.UUID) *TestUpdate {
	if tu.clinical == nil {
		tu.clinical = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		tu.clinical[ids[i]] = struct{}{}
	}
	return tu
}

// AddClinical adds the clinical edges to ClinicalResults.
func (tu *TestUpdate) AddClinical(c ...*ClinicalResults) *TestUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tu.AddClinicalIDs(ids...)
}

// AddEpidemiologicIDs adds the epidemiologic edge to EpidemiologicResults by ids.
func (tu *TestUpdate) AddEpidemiologicIDs(ids ...uuid.UUID) *TestUpdate {
	if tu.epidemiologic == nil {
		tu.epidemiologic = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		tu.epidemiologic[ids[i]] = struct{}{}
	}
	return tu
}

// AddEpidemiologic adds the epidemiologic edges to EpidemiologicResults.
func (tu *TestUpdate) AddEpidemiologic(e ...*EpidemiologicResults) *TestUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return tu.AddEpidemiologicIDs(ids...)
}

// ClearHistory clears the history edge to History.
func (tu *TestUpdate) ClearHistory() *TestUpdate {
	tu.clearedHistory = true
	return tu
}

// RemoveClinicalIDs removes the clinical edge to ClinicalResults by ids.
func (tu *TestUpdate) RemoveClinicalIDs(ids ...uuid.UUID) *TestUpdate {
	if tu.removedClinical == nil {
		tu.removedClinical = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		tu.removedClinical[ids[i]] = struct{}{}
	}
	return tu
}

// RemoveClinical removes clinical edges to ClinicalResults.
func (tu *TestUpdate) RemoveClinical(c ...*ClinicalResults) *TestUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tu.RemoveClinicalIDs(ids...)
}

// RemoveEpidemiologicIDs removes the epidemiologic edge to EpidemiologicResults by ids.
func (tu *TestUpdate) RemoveEpidemiologicIDs(ids ...uuid.UUID) *TestUpdate {
	if tu.removedEpidemiologic == nil {
		tu.removedEpidemiologic = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		tu.removedEpidemiologic[ids[i]] = struct{}{}
	}
	return tu
}

// RemoveEpidemiologic removes epidemiologic edges to EpidemiologicResults.
func (tu *TestUpdate) RemoveEpidemiologic(e ...*EpidemiologicResults) *TestUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return tu.RemoveEpidemiologicIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (tu *TestUpdate) Save(ctx context.Context) (int, error) {
	if len(tu.history) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"history\"")
	}
	return tu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TestUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TestUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TestUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TestUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   test.Table,
			Columns: test.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: test.FieldID,
			},
		},
	}
	if ps := tu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value := tu.notes; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  *value,
			Column: test.FieldNotes,
		})
	}
	if tu.clearnotes {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: test.FieldNotes,
		})
	}
	if tu.clearedHistory {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   test.HistoryTable,
			Columns: []string{test.HistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: history.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.history; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   test.HistoryTable,
			Columns: []string{test.HistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: history.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := tu.removedClinical; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   test.ClinicalTable,
			Columns: []string{test.ClinicalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: clinicalresults.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.clinical; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   test.ClinicalTable,
			Columns: []string{test.ClinicalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: clinicalresults.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := tu.removedEpidemiologic; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   test.EpidemiologicTable,
			Columns: []string{test.EpidemiologicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: epidemiologicresults.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.epidemiologic; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   test.EpidemiologicTable,
			Columns: []string{test.EpidemiologicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: epidemiologicresults.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{test.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// TestUpdateOne is the builder for updating a single Test entity.
type TestUpdateOne struct {
	config
	id                   uuid.UUID
	notes                *[]string
	clearnotes           bool
	history              map[uuid.UUID]struct{}
	clinical             map[uuid.UUID]struct{}
	epidemiologic        map[uuid.UUID]struct{}
	clearedHistory       bool
	removedClinical      map[uuid.UUID]struct{}
	removedEpidemiologic map[uuid.UUID]struct{}
}

// SetNotes sets the notes field.
func (tuo *TestUpdateOne) SetNotes(s []string) *TestUpdateOne {
	tuo.notes = &s
	return tuo
}

// ClearNotes clears the value of notes.
func (tuo *TestUpdateOne) ClearNotes() *TestUpdateOne {
	tuo.notes = nil
	tuo.clearnotes = true
	return tuo
}

// SetHistoryID sets the history edge to History by id.
func (tuo *TestUpdateOne) SetHistoryID(id uuid.UUID) *TestUpdateOne {
	if tuo.history == nil {
		tuo.history = make(map[uuid.UUID]struct{})
	}
	tuo.history[id] = struct{}{}
	return tuo
}

// SetNillableHistoryID sets the history edge to History by id if the given value is not nil.
func (tuo *TestUpdateOne) SetNillableHistoryID(id *uuid.UUID) *TestUpdateOne {
	if id != nil {
		tuo = tuo.SetHistoryID(*id)
	}
	return tuo
}

// SetHistory sets the history edge to History.
func (tuo *TestUpdateOne) SetHistory(h *History) *TestUpdateOne {
	return tuo.SetHistoryID(h.ID)
}

// AddClinicalIDs adds the clinical edge to ClinicalResults by ids.
func (tuo *TestUpdateOne) AddClinicalIDs(ids ...uuid.UUID) *TestUpdateOne {
	if tuo.clinical == nil {
		tuo.clinical = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		tuo.clinical[ids[i]] = struct{}{}
	}
	return tuo
}

// AddClinical adds the clinical edges to ClinicalResults.
func (tuo *TestUpdateOne) AddClinical(c ...*ClinicalResults) *TestUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tuo.AddClinicalIDs(ids...)
}

// AddEpidemiologicIDs adds the epidemiologic edge to EpidemiologicResults by ids.
func (tuo *TestUpdateOne) AddEpidemiologicIDs(ids ...uuid.UUID) *TestUpdateOne {
	if tuo.epidemiologic == nil {
		tuo.epidemiologic = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		tuo.epidemiologic[ids[i]] = struct{}{}
	}
	return tuo
}

// AddEpidemiologic adds the epidemiologic edges to EpidemiologicResults.
func (tuo *TestUpdateOne) AddEpidemiologic(e ...*EpidemiologicResults) *TestUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return tuo.AddEpidemiologicIDs(ids...)
}

// ClearHistory clears the history edge to History.
func (tuo *TestUpdateOne) ClearHistory() *TestUpdateOne {
	tuo.clearedHistory = true
	return tuo
}

// RemoveClinicalIDs removes the clinical edge to ClinicalResults by ids.
func (tuo *TestUpdateOne) RemoveClinicalIDs(ids ...uuid.UUID) *TestUpdateOne {
	if tuo.removedClinical == nil {
		tuo.removedClinical = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		tuo.removedClinical[ids[i]] = struct{}{}
	}
	return tuo
}

// RemoveClinical removes clinical edges to ClinicalResults.
func (tuo *TestUpdateOne) RemoveClinical(c ...*ClinicalResults) *TestUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tuo.RemoveClinicalIDs(ids...)
}

// RemoveEpidemiologicIDs removes the epidemiologic edge to EpidemiologicResults by ids.
func (tuo *TestUpdateOne) RemoveEpidemiologicIDs(ids ...uuid.UUID) *TestUpdateOne {
	if tuo.removedEpidemiologic == nil {
		tuo.removedEpidemiologic = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		tuo.removedEpidemiologic[ids[i]] = struct{}{}
	}
	return tuo
}

// RemoveEpidemiologic removes epidemiologic edges to EpidemiologicResults.
func (tuo *TestUpdateOne) RemoveEpidemiologic(e ...*EpidemiologicResults) *TestUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return tuo.RemoveEpidemiologicIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (tuo *TestUpdateOne) Save(ctx context.Context) (*Test, error) {
	if len(tuo.history) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"history\"")
	}
	return tuo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TestUpdateOne) SaveX(ctx context.Context) *Test {
	t, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return t
}

// Exec executes the query on the entity.
func (tuo *TestUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TestUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TestUpdateOne) sqlSave(ctx context.Context) (t *Test, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   test.Table,
			Columns: test.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  tuo.id,
				Type:   field.TypeUUID,
				Column: test.FieldID,
			},
		},
	}
	if value := tuo.notes; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  *value,
			Column: test.FieldNotes,
		})
	}
	if tuo.clearnotes {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: test.FieldNotes,
		})
	}
	if tuo.clearedHistory {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   test.HistoryTable,
			Columns: []string{test.HistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: history.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.history; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   test.HistoryTable,
			Columns: []string{test.HistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: history.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := tuo.removedClinical; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   test.ClinicalTable,
			Columns: []string{test.ClinicalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: clinicalresults.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.clinical; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   test.ClinicalTable,
			Columns: []string{test.ClinicalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: clinicalresults.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := tuo.removedEpidemiologic; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   test.EpidemiologicTable,
			Columns: []string{test.EpidemiologicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: epidemiologicresults.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.epidemiologic; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   test.EpidemiologicTable,
			Columns: []string{test.EpidemiologicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: epidemiologicresults.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	t = &Test{config: tuo.config}
	_spec.Assign = t.assignValues
	_spec.ScanValues = t.scanValues()
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{test.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return t, nil
}
