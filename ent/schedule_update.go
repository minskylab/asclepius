// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/google/uuid"
	"github.com/minskylab/asclepius/ent/patient"
	"github.com/minskylab/asclepius/ent/predicate"
	"github.com/minskylab/asclepius/ent/schedule"
	"github.com/minskylab/asclepius/ent/task"
)

// ScheduleUpdate is the builder for updating Schedule entities.
type ScheduleUpdate struct {
	config
	tasks          map[uuid.UUID]struct{}
	patient        map[uuid.UUID]struct{}
	removedTasks   map[uuid.UUID]struct{}
	clearedPatient bool
	predicates     []predicate.Schedule
}

// Where adds a new predicate for the builder.
func (su *ScheduleUpdate) Where(ps ...predicate.Schedule) *ScheduleUpdate {
	su.predicates = append(su.predicates, ps...)
	return su
}

// AddTaskIDs adds the tasks edge to Task by ids.
func (su *ScheduleUpdate) AddTaskIDs(ids ...uuid.UUID) *ScheduleUpdate {
	if su.tasks == nil {
		su.tasks = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		su.tasks[ids[i]] = struct{}{}
	}
	return su
}

// AddTasks adds the tasks edges to Task.
func (su *ScheduleUpdate) AddTasks(t ...*Task) *ScheduleUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.AddTaskIDs(ids...)
}

// SetPatientID sets the patient edge to Patient by id.
func (su *ScheduleUpdate) SetPatientID(id uuid.UUID) *ScheduleUpdate {
	if su.patient == nil {
		su.patient = make(map[uuid.UUID]struct{})
	}
	su.patient[id] = struct{}{}
	return su
}

// SetNillablePatientID sets the patient edge to Patient by id if the given value is not nil.
func (su *ScheduleUpdate) SetNillablePatientID(id *uuid.UUID) *ScheduleUpdate {
	if id != nil {
		su = su.SetPatientID(*id)
	}
	return su
}

// SetPatient sets the patient edge to Patient.
func (su *ScheduleUpdate) SetPatient(p *Patient) *ScheduleUpdate {
	return su.SetPatientID(p.ID)
}

// RemoveTaskIDs removes the tasks edge to Task by ids.
func (su *ScheduleUpdate) RemoveTaskIDs(ids ...uuid.UUID) *ScheduleUpdate {
	if su.removedTasks == nil {
		su.removedTasks = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		su.removedTasks[ids[i]] = struct{}{}
	}
	return su
}

// RemoveTasks removes tasks edges to Task.
func (su *ScheduleUpdate) RemoveTasks(t ...*Task) *ScheduleUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.RemoveTaskIDs(ids...)
}

// ClearPatient clears the patient edge to Patient.
func (su *ScheduleUpdate) ClearPatient() *ScheduleUpdate {
	su.clearedPatient = true
	return su
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (su *ScheduleUpdate) Save(ctx context.Context) (int, error) {
	if len(su.patient) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"patient\"")
	}
	return su.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (su *ScheduleUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ScheduleUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ScheduleUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *ScheduleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   schedule.Table,
			Columns: schedule.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: schedule.FieldID,
			},
		},
	}
	if ps := su.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if nodes := su.removedTasks; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   schedule.TasksTable,
			Columns: []string{schedule.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: task.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.tasks; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   schedule.TasksTable,
			Columns: []string{schedule.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: task.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.clearedPatient {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   schedule.PatientTable,
			Columns: []string{schedule.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: patient.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.patient; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   schedule.PatientTable,
			Columns: []string{schedule.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: patient.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{schedule.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ScheduleUpdateOne is the builder for updating a single Schedule entity.
type ScheduleUpdateOne struct {
	config
	id             uuid.UUID
	tasks          map[uuid.UUID]struct{}
	patient        map[uuid.UUID]struct{}
	removedTasks   map[uuid.UUID]struct{}
	clearedPatient bool
}

// AddTaskIDs adds the tasks edge to Task by ids.
func (suo *ScheduleUpdateOne) AddTaskIDs(ids ...uuid.UUID) *ScheduleUpdateOne {
	if suo.tasks == nil {
		suo.tasks = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		suo.tasks[ids[i]] = struct{}{}
	}
	return suo
}

// AddTasks adds the tasks edges to Task.
func (suo *ScheduleUpdateOne) AddTasks(t ...*Task) *ScheduleUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.AddTaskIDs(ids...)
}

// SetPatientID sets the patient edge to Patient by id.
func (suo *ScheduleUpdateOne) SetPatientID(id uuid.UUID) *ScheduleUpdateOne {
	if suo.patient == nil {
		suo.patient = make(map[uuid.UUID]struct{})
	}
	suo.patient[id] = struct{}{}
	return suo
}

// SetNillablePatientID sets the patient edge to Patient by id if the given value is not nil.
func (suo *ScheduleUpdateOne) SetNillablePatientID(id *uuid.UUID) *ScheduleUpdateOne {
	if id != nil {
		suo = suo.SetPatientID(*id)
	}
	return suo
}

// SetPatient sets the patient edge to Patient.
func (suo *ScheduleUpdateOne) SetPatient(p *Patient) *ScheduleUpdateOne {
	return suo.SetPatientID(p.ID)
}

// RemoveTaskIDs removes the tasks edge to Task by ids.
func (suo *ScheduleUpdateOne) RemoveTaskIDs(ids ...uuid.UUID) *ScheduleUpdateOne {
	if suo.removedTasks == nil {
		suo.removedTasks = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		suo.removedTasks[ids[i]] = struct{}{}
	}
	return suo
}

// RemoveTasks removes tasks edges to Task.
func (suo *ScheduleUpdateOne) RemoveTasks(t ...*Task) *ScheduleUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.RemoveTaskIDs(ids...)
}

// ClearPatient clears the patient edge to Patient.
func (suo *ScheduleUpdateOne) ClearPatient() *ScheduleUpdateOne {
	suo.clearedPatient = true
	return suo
}

// Save executes the query and returns the updated entity.
func (suo *ScheduleUpdateOne) Save(ctx context.Context) (*Schedule, error) {
	if len(suo.patient) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"patient\"")
	}
	return suo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ScheduleUpdateOne) SaveX(ctx context.Context) *Schedule {
	s, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return s
}

// Exec executes the query on the entity.
func (suo *ScheduleUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ScheduleUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *ScheduleUpdateOne) sqlSave(ctx context.Context) (s *Schedule, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   schedule.Table,
			Columns: schedule.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  suo.id,
				Type:   field.TypeUUID,
				Column: schedule.FieldID,
			},
		},
	}
	if nodes := suo.removedTasks; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   schedule.TasksTable,
			Columns: []string{schedule.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: task.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.tasks; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   schedule.TasksTable,
			Columns: []string{schedule.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: task.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.clearedPatient {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   schedule.PatientTable,
			Columns: []string{schedule.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: patient.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.patient; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   schedule.PatientTable,
			Columns: []string{schedule.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: patient.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	s = &Schedule{config: suo.config}
	_spec.Assign = s.assignValues
	_spec.ScanValues = s.scanValues()
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{schedule.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return s, nil
}
