// Code generated by entc, DO NOT EDIT.

package medicalnote

import (
	"time"

	"github.com/minskylab/asclepius/ent/schema"
)

const (
	// Label holds the string label denoting the medicalnote type in the database.
	Label = "medical_note"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAt holds the string denoting the at vertex property in the database.
	FieldAt = "at"
	// FieldLastChange holds the string denoting the lastchange vertex property in the database.
	FieldLastChange = "last_change"
	// FieldObservations holds the string denoting the observations vertex property in the database.
	FieldObservations = "observations"
	// FieldMeta holds the string denoting the meta vertex property in the database.
	FieldMeta = "meta"

	// Table holds the table name of the medicalnote in the database.
	Table = "medical_notes"
	// HistoryTable is the table the holds the history relation/edge.
	HistoryTable = "medical_notes"
	// HistoryInverseTable is the table name for the History entity.
	// It exists in this package in order to avoid circular dependency with the "history" package.
	HistoryInverseTable = "histories"
	// HistoryColumn is the table column denoting the history relation/edge.
	HistoryColumn = "history_notes"
	// OwnerTable is the table the holds the owner relation/edge.
	OwnerTable = "medical_notes"
	// OwnerInverseTable is the table name for the Doctor entity.
	// It exists in this package in order to avoid circular dependency with the "doctor" package.
	OwnerInverseTable = "doctors"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "doctor_notes"
)

// Columns holds all SQL columns for medicalnote fields.
var Columns = []string{
	FieldID,
	FieldAt,
	FieldLastChange,
	FieldObservations,
	FieldMeta,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the MedicalNote type.
var ForeignKeys = []string{
	"doctor_notes",
	"history_notes",
}

var (
	fields = schema.MedicalNote{}.Fields()

	// descAt is the schema descriptor for at field.
	descAt = fields[1].Descriptor()
	// DefaultAt holds the default value on creation for the at field.
	DefaultAt = descAt.Default.(func() time.Time)

	// descLastChange is the schema descriptor for lastChange field.
	descLastChange = fields[2].Descriptor()
	// DefaultLastChange holds the default value on creation for the lastChange field.
	DefaultLastChange = descLastChange.Default.(func() time.Time)
)
