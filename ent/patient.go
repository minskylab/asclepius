// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/minskylab/asclepius/ent/history"
	"github.com/minskylab/asclepius/ent/patient"
	"github.com/minskylab/asclepius/ent/schedule"
)

// Patient is the model entity for the Patient schema.
type Patient struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone,omitempty"`
	// Age holds the value of the "age" field.
	Age int `json:"age,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"-"`
	// FacebookID holds the value of the "facebookID" field.
	FacebookID string `json:"facebookID,omitempty"`
	// WatsonID holds the value of the "watsonID" field.
	WatsonID string `json:"watsonID,omitempty"`
	// FirstContact holds the value of the "first_contact" field.
	FirstContact time.Time `json:"first_contact,omitempty"`
	// Conditions holds the value of the "conditions" field.
	Conditions []string `json:"conditions,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PatientQuery when eager-loading is set.
	Edges PatientEdges `json:"edges"`
}

// PatientEdges holds the relations/edges for other nodes in the graph.
type PatientEdges struct {
	// History holds the value of the history edge.
	History *History
	// Schedule holds the value of the schedule edge.
	Schedule *Schedule
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// HistoryOrErr returns the History value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PatientEdges) HistoryOrErr() (*History, error) {
	if e.loadedTypes[0] {
		if e.History == nil {
			// The edge history was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: history.Label}
		}
		return e.History, nil
	}
	return nil, &NotLoadedError{edge: "history"}
}

// ScheduleOrErr returns the Schedule value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PatientEdges) ScheduleOrErr() (*Schedule, error) {
	if e.loadedTypes[1] {
		if e.Schedule == nil {
			// The edge schedule was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: schedule.Label}
		}
		return e.Schedule, nil
	}
	return nil, &NotLoadedError{edge: "schedule"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Patient) scanValues() []interface{} {
	return []interface{}{
		&uuid.UUID{},      // id
		&sql.NullString{}, // name
		&sql.NullString{}, // phone
		&sql.NullInt64{},  // age
		&sql.NullString{}, // email
		&sql.NullString{}, // password
		&sql.NullString{}, // facebookID
		&sql.NullString{}, // watsonID
		&sql.NullTime{},   // first_contact
		&[]byte{},         // conditions
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Patient fields.
func (pa *Patient) assignValues(values ...interface{}) error {
	if m, n := len(values), len(patient.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	if value, ok := values[0].(*uuid.UUID); !ok {
		return fmt.Errorf("unexpected type %T for field id", values[0])
	} else if value != nil {
		pa.ID = *value
	}
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		pa.Name = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field phone", values[1])
	} else if value.Valid {
		pa.Phone = value.String
	}
	if value, ok := values[2].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field age", values[2])
	} else if value.Valid {
		pa.Age = int(value.Int64)
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field email", values[3])
	} else if value.Valid {
		pa.Email = value.String
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field password", values[4])
	} else if value.Valid {
		pa.Password = value.String
	}
	if value, ok := values[5].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field facebookID", values[5])
	} else if value.Valid {
		pa.FacebookID = value.String
	}
	if value, ok := values[6].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field watsonID", values[6])
	} else if value.Valid {
		pa.WatsonID = value.String
	}
	if value, ok := values[7].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field first_contact", values[7])
	} else if value.Valid {
		pa.FirstContact = value.Time
	}

	if value, ok := values[8].(*[]byte); !ok {
		return fmt.Errorf("unexpected type %T for field conditions", values[8])
	} else if value != nil && len(*value) > 0 {
		if err := json.Unmarshal(*value, &pa.Conditions); err != nil {
			return fmt.Errorf("unmarshal field conditions: %v", err)
		}
	}
	return nil
}

// QueryHistory queries the history edge of the Patient.
func (pa *Patient) QueryHistory() *HistoryQuery {
	return (&PatientClient{config: pa.config}).QueryHistory(pa)
}

// QuerySchedule queries the schedule edge of the Patient.
func (pa *Patient) QuerySchedule() *ScheduleQuery {
	return (&PatientClient{config: pa.config}).QuerySchedule(pa)
}

// Update returns a builder for updating this Patient.
// Note that, you need to call Patient.Unwrap() before calling this method, if this Patient
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *Patient) Update() *PatientUpdateOne {
	return (&PatientClient{config: pa.config}).UpdateOne(pa)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (pa *Patient) Unwrap() *Patient {
	tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: Patient is not a transactional entity")
	}
	pa.config.driver = tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *Patient) String() string {
	var builder strings.Builder
	builder.WriteString("Patient(")
	builder.WriteString(fmt.Sprintf("id=%v", pa.ID))
	builder.WriteString(", name=")
	builder.WriteString(pa.Name)
	builder.WriteString(", phone=")
	builder.WriteString(pa.Phone)
	builder.WriteString(", age=")
	builder.WriteString(fmt.Sprintf("%v", pa.Age))
	builder.WriteString(", email=")
	builder.WriteString(pa.Email)
	builder.WriteString(", password=<sensitive>")
	builder.WriteString(", facebookID=")
	builder.WriteString(pa.FacebookID)
	builder.WriteString(", watsonID=")
	builder.WriteString(pa.WatsonID)
	builder.WriteString(", first_contact=")
	builder.WriteString(pa.FirstContact.Format(time.ANSIC))
	builder.WriteString(", conditions=")
	builder.WriteString(fmt.Sprintf("%v", pa.Conditions))
	builder.WriteByte(')')
	return builder.String()
}

// Patients is a parsable slice of Patient.
type Patients []*Patient

func (pa Patients) config(cfg config) {
	for _i := range pa {
		pa[_i].config = cfg
	}
}
