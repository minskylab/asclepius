// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/google/uuid"
	"github.com/minskylab/asclepius/ent/history"
	"github.com/minskylab/asclepius/ent/patient"
	"github.com/minskylab/asclepius/ent/schedule"
)

// PatientCreate is the builder for creating a Patient entity.
type PatientCreate struct {
	config
	id            *uuid.UUID
	name          *string
	phone         *string
	age           *int
	email         *string
	password      *string
	facebookID    *string
	watsonID      *string
	first_contact *time.Time
	conditions    *[]string
	history       map[uuid.UUID]struct{}
	schedule      map[uuid.UUID]struct{}
}

// SetName sets the name field.
func (pc *PatientCreate) SetName(s string) *PatientCreate {
	pc.name = &s
	return pc
}

// SetPhone sets the phone field.
func (pc *PatientCreate) SetPhone(s string) *PatientCreate {
	pc.phone = &s
	return pc
}

// SetAge sets the age field.
func (pc *PatientCreate) SetAge(i int) *PatientCreate {
	pc.age = &i
	return pc
}

// SetNillableAge sets the age field if the given value is not nil.
func (pc *PatientCreate) SetNillableAge(i *int) *PatientCreate {
	if i != nil {
		pc.SetAge(*i)
	}
	return pc
}

// SetEmail sets the email field.
func (pc *PatientCreate) SetEmail(s string) *PatientCreate {
	pc.email = &s
	return pc
}

// SetNillableEmail sets the email field if the given value is not nil.
func (pc *PatientCreate) SetNillableEmail(s *string) *PatientCreate {
	if s != nil {
		pc.SetEmail(*s)
	}
	return pc
}

// SetPassword sets the password field.
func (pc *PatientCreate) SetPassword(s string) *PatientCreate {
	pc.password = &s
	return pc
}

// SetNillablePassword sets the password field if the given value is not nil.
func (pc *PatientCreate) SetNillablePassword(s *string) *PatientCreate {
	if s != nil {
		pc.SetPassword(*s)
	}
	return pc
}

// SetFacebookID sets the facebookID field.
func (pc *PatientCreate) SetFacebookID(s string) *PatientCreate {
	pc.facebookID = &s
	return pc
}

// SetNillableFacebookID sets the facebookID field if the given value is not nil.
func (pc *PatientCreate) SetNillableFacebookID(s *string) *PatientCreate {
	if s != nil {
		pc.SetFacebookID(*s)
	}
	return pc
}

// SetWatsonID sets the watsonID field.
func (pc *PatientCreate) SetWatsonID(s string) *PatientCreate {
	pc.watsonID = &s
	return pc
}

// SetNillableWatsonID sets the watsonID field if the given value is not nil.
func (pc *PatientCreate) SetNillableWatsonID(s *string) *PatientCreate {
	if s != nil {
		pc.SetWatsonID(*s)
	}
	return pc
}

// SetFirstContact sets the first_contact field.
func (pc *PatientCreate) SetFirstContact(t time.Time) *PatientCreate {
	pc.first_contact = &t
	return pc
}

// SetNillableFirstContact sets the first_contact field if the given value is not nil.
func (pc *PatientCreate) SetNillableFirstContact(t *time.Time) *PatientCreate {
	if t != nil {
		pc.SetFirstContact(*t)
	}
	return pc
}

// SetConditions sets the conditions field.
func (pc *PatientCreate) SetConditions(s []string) *PatientCreate {
	pc.conditions = &s
	return pc
}

// SetID sets the id field.
func (pc *PatientCreate) SetID(u uuid.UUID) *PatientCreate {
	pc.id = &u
	return pc
}

// SetHistoryID sets the history edge to History by id.
func (pc *PatientCreate) SetHistoryID(id uuid.UUID) *PatientCreate {
	if pc.history == nil {
		pc.history = make(map[uuid.UUID]struct{})
	}
	pc.history[id] = struct{}{}
	return pc
}

// SetHistory sets the history edge to History.
func (pc *PatientCreate) SetHistory(h *History) *PatientCreate {
	return pc.SetHistoryID(h.ID)
}

// SetScheduleID sets the schedule edge to Schedule by id.
func (pc *PatientCreate) SetScheduleID(id uuid.UUID) *PatientCreate {
	if pc.schedule == nil {
		pc.schedule = make(map[uuid.UUID]struct{})
	}
	pc.schedule[id] = struct{}{}
	return pc
}

// SetSchedule sets the schedule edge to Schedule.
func (pc *PatientCreate) SetSchedule(s *Schedule) *PatientCreate {
	return pc.SetScheduleID(s.ID)
}

// Save creates the Patient in the database.
func (pc *PatientCreate) Save(ctx context.Context) (*Patient, error) {
	if pc.name == nil {
		return nil, errors.New("ent: missing required field \"name\"")
	}
	if pc.phone == nil {
		return nil, errors.New("ent: missing required field \"phone\"")
	}
	if pc.age != nil {
		if err := patient.AgeValidator(*pc.age); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"age\": %v", err)
		}
	}
	if pc.password != nil {
		if err := patient.PasswordValidator(*pc.password); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"password\": %v", err)
		}
	}
	if pc.first_contact == nil {
		v := patient.DefaultFirstContact()
		pc.first_contact = &v
	}
	if len(pc.history) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"history\"")
	}
	if pc.history == nil {
		return nil, errors.New("ent: missing required edge \"history\"")
	}
	if len(pc.schedule) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"schedule\"")
	}
	if pc.schedule == nil {
		return nil, errors.New("ent: missing required edge \"schedule\"")
	}
	return pc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PatientCreate) SaveX(ctx context.Context) *Patient {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pc *PatientCreate) sqlSave(ctx context.Context) (*Patient, error) {
	var (
		pa    = &Patient{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: patient.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: patient.FieldID,
			},
		}
	)
	if value := pc.id; value != nil {
		pa.ID = *value
		_spec.ID.Value = *value
	}
	if value := pc.name; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: patient.FieldName,
		})
		pa.Name = *value
	}
	if value := pc.phone; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: patient.FieldPhone,
		})
		pa.Phone = *value
	}
	if value := pc.age; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: patient.FieldAge,
		})
		pa.Age = *value
	}
	if value := pc.email; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: patient.FieldEmail,
		})
		pa.Email = *value
	}
	if value := pc.password; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: patient.FieldPassword,
		})
		pa.Password = *value
	}
	if value := pc.facebookID; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: patient.FieldFacebookID,
		})
		pa.FacebookID = *value
	}
	if value := pc.watsonID; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: patient.FieldWatsonID,
		})
		pa.WatsonID = *value
	}
	if value := pc.first_contact; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: patient.FieldFirstContact,
		})
		pa.FirstContact = *value
	}
	if value := pc.conditions; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  *value,
			Column: patient.FieldConditions,
		})
		pa.Conditions = *value
	}
	if nodes := pc.history; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   patient.HistoryTable,
			Columns: []string{patient.HistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: history.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.schedule; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   patient.ScheduleTable,
			Columns: []string{patient.ScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: schedule.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return pa, nil
}
