// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/google/uuid"
	"github.com/minskylab/asclepius/ent/doctor"
	"github.com/minskylab/asclepius/ent/history"
	"github.com/minskylab/asclepius/ent/medicalnote"
)

// MedicalNoteCreate is the builder for creating a MedicalNote entity.
type MedicalNoteCreate struct {
	config
	id           *uuid.UUID
	at           *time.Time
	lastChange   *time.Time
	observations *[]string
	meta         *[]string
	history      map[uuid.UUID]struct{}
	owner        map[uuid.UUID]struct{}
}

// SetAt sets the at field.
func (mnc *MedicalNoteCreate) SetAt(t time.Time) *MedicalNoteCreate {
	mnc.at = &t
	return mnc
}

// SetNillableAt sets the at field if the given value is not nil.
func (mnc *MedicalNoteCreate) SetNillableAt(t *time.Time) *MedicalNoteCreate {
	if t != nil {
		mnc.SetAt(*t)
	}
	return mnc
}

// SetLastChange sets the lastChange field.
func (mnc *MedicalNoteCreate) SetLastChange(t time.Time) *MedicalNoteCreate {
	mnc.lastChange = &t
	return mnc
}

// SetNillableLastChange sets the lastChange field if the given value is not nil.
func (mnc *MedicalNoteCreate) SetNillableLastChange(t *time.Time) *MedicalNoteCreate {
	if t != nil {
		mnc.SetLastChange(*t)
	}
	return mnc
}

// SetObservations sets the observations field.
func (mnc *MedicalNoteCreate) SetObservations(s []string) *MedicalNoteCreate {
	mnc.observations = &s
	return mnc
}

// SetMeta sets the meta field.
func (mnc *MedicalNoteCreate) SetMeta(s []string) *MedicalNoteCreate {
	mnc.meta = &s
	return mnc
}

// SetID sets the id field.
func (mnc *MedicalNoteCreate) SetID(u uuid.UUID) *MedicalNoteCreate {
	mnc.id = &u
	return mnc
}

// SetHistoryID sets the history edge to History by id.
func (mnc *MedicalNoteCreate) SetHistoryID(id uuid.UUID) *MedicalNoteCreate {
	if mnc.history == nil {
		mnc.history = make(map[uuid.UUID]struct{})
	}
	mnc.history[id] = struct{}{}
	return mnc
}

// SetNillableHistoryID sets the history edge to History by id if the given value is not nil.
func (mnc *MedicalNoteCreate) SetNillableHistoryID(id *uuid.UUID) *MedicalNoteCreate {
	if id != nil {
		mnc = mnc.SetHistoryID(*id)
	}
	return mnc
}

// SetHistory sets the history edge to History.
func (mnc *MedicalNoteCreate) SetHistory(h *History) *MedicalNoteCreate {
	return mnc.SetHistoryID(h.ID)
}

// SetOwnerID sets the owner edge to Doctor by id.
func (mnc *MedicalNoteCreate) SetOwnerID(id uuid.UUID) *MedicalNoteCreate {
	if mnc.owner == nil {
		mnc.owner = make(map[uuid.UUID]struct{})
	}
	mnc.owner[id] = struct{}{}
	return mnc
}

// SetNillableOwnerID sets the owner edge to Doctor by id if the given value is not nil.
func (mnc *MedicalNoteCreate) SetNillableOwnerID(id *uuid.UUID) *MedicalNoteCreate {
	if id != nil {
		mnc = mnc.SetOwnerID(*id)
	}
	return mnc
}

// SetOwner sets the owner edge to Doctor.
func (mnc *MedicalNoteCreate) SetOwner(d *Doctor) *MedicalNoteCreate {
	return mnc.SetOwnerID(d.ID)
}

// Save creates the MedicalNote in the database.
func (mnc *MedicalNoteCreate) Save(ctx context.Context) (*MedicalNote, error) {
	if mnc.at == nil {
		v := medicalnote.DefaultAt()
		mnc.at = &v
	}
	if mnc.lastChange == nil {
		v := medicalnote.DefaultLastChange()
		mnc.lastChange = &v
	}
	if mnc.observations == nil {
		return nil, errors.New("ent: missing required field \"observations\"")
	}
	if len(mnc.history) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"history\"")
	}
	if len(mnc.owner) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"owner\"")
	}
	return mnc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (mnc *MedicalNoteCreate) SaveX(ctx context.Context) *MedicalNote {
	v, err := mnc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (mnc *MedicalNoteCreate) sqlSave(ctx context.Context) (*MedicalNote, error) {
	var (
		mn    = &MedicalNote{config: mnc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: medicalnote.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: medicalnote.FieldID,
			},
		}
	)
	if value := mnc.id; value != nil {
		mn.ID = *value
		_spec.ID.Value = *value
	}
	if value := mnc.at; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: medicalnote.FieldAt,
		})
		mn.At = *value
	}
	if value := mnc.lastChange; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: medicalnote.FieldLastChange,
		})
		mn.LastChange = *value
	}
	if value := mnc.observations; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  *value,
			Column: medicalnote.FieldObservations,
		})
		mn.Observations = *value
	}
	if value := mnc.meta; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  *value,
			Column: medicalnote.FieldMeta,
		})
		mn.Meta = *value
	}
	if nodes := mnc.history; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   medicalnote.HistoryTable,
			Columns: []string{medicalnote.HistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: history.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mnc.owner; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   medicalnote.OwnerTable,
			Columns: []string{medicalnote.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: doctor.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, mnc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return mn, nil
}
