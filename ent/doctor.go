// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/minskylab/asclepius/ent/doctor"
)

// Doctor is the model entity for the Doctor schema.
type Doctor struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name []string `json:"name,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone,omitempty"`
	// State holds the value of the "state" field.
	State doctor.State `json:"state,omitempty"`
	// LastConnection holds the value of the "lastConnection" field.
	LastConnection time.Time `json:"lastConnection,omitempty"`
	// Volunteer holds the value of the "volunteer" field.
	Volunteer bool `json:"volunteer,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DoctorQuery when eager-loading is set.
	Edges DoctorEdges `json:"edges"`
}

// DoctorEdges holds the relations/edges for other nodes in the graph.
type DoctorEdges struct {
	// Notes holds the value of the notes edge.
	Notes []*MedicalNote
	// Responses holds the value of the responses edge.
	Responses []*TaskResponse
	// Tasks holds the value of the tasks edge.
	Tasks []*Task
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// NotesOrErr returns the Notes value or an error if the edge
// was not loaded in eager-loading.
func (e DoctorEdges) NotesOrErr() ([]*MedicalNote, error) {
	if e.loadedTypes[0] {
		return e.Notes, nil
	}
	return nil, &NotLoadedError{edge: "notes"}
}

// ResponsesOrErr returns the Responses value or an error if the edge
// was not loaded in eager-loading.
func (e DoctorEdges) ResponsesOrErr() ([]*TaskResponse, error) {
	if e.loadedTypes[1] {
		return e.Responses, nil
	}
	return nil, &NotLoadedError{edge: "responses"}
}

// TasksOrErr returns the Tasks value or an error if the edge
// was not loaded in eager-loading.
func (e DoctorEdges) TasksOrErr() ([]*Task, error) {
	if e.loadedTypes[2] {
		return e.Tasks, nil
	}
	return nil, &NotLoadedError{edge: "tasks"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Doctor) scanValues() []interface{} {
	return []interface{}{
		&uuid.UUID{},      // id
		&[]byte{},         // name
		&sql.NullString{}, // email
		&sql.NullString{}, // phone
		&sql.NullString{}, // state
		&sql.NullTime{},   // lastConnection
		&sql.NullBool{},   // volunteer
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Doctor fields.
func (d *Doctor) assignValues(values ...interface{}) error {
	if m, n := len(values), len(doctor.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	if value, ok := values[0].(*uuid.UUID); !ok {
		return fmt.Errorf("unexpected type %T for field id", values[0])
	} else if value != nil {
		d.ID = *value
	}
	values = values[1:]

	if value, ok := values[0].(*[]byte); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value != nil && len(*value) > 0 {
		if err := json.Unmarshal(*value, &d.Name); err != nil {
			return fmt.Errorf("unmarshal field name: %v", err)
		}
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field email", values[1])
	} else if value.Valid {
		d.Email = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field phone", values[2])
	} else if value.Valid {
		d.Phone = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field state", values[3])
	} else if value.Valid {
		d.State = doctor.State(value.String)
	}
	if value, ok := values[4].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field lastConnection", values[4])
	} else if value.Valid {
		d.LastConnection = value.Time
	}
	if value, ok := values[5].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field volunteer", values[5])
	} else if value.Valid {
		d.Volunteer = value.Bool
	}
	return nil
}

// QueryNotes queries the notes edge of the Doctor.
func (d *Doctor) QueryNotes() *MedicalNoteQuery {
	return (&DoctorClient{config: d.config}).QueryNotes(d)
}

// QueryResponses queries the responses edge of the Doctor.
func (d *Doctor) QueryResponses() *TaskResponseQuery {
	return (&DoctorClient{config: d.config}).QueryResponses(d)
}

// QueryTasks queries the tasks edge of the Doctor.
func (d *Doctor) QueryTasks() *TaskQuery {
	return (&DoctorClient{config: d.config}).QueryTasks(d)
}

// Update returns a builder for updating this Doctor.
// Note that, you need to call Doctor.Unwrap() before calling this method, if this Doctor
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Doctor) Update() *DoctorUpdateOne {
	return (&DoctorClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (d *Doctor) Unwrap() *Doctor {
	tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Doctor is not a transactional entity")
	}
	d.config.driver = tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Doctor) String() string {
	var builder strings.Builder
	builder.WriteString("Doctor(")
	builder.WriteString(fmt.Sprintf("id=%v", d.ID))
	builder.WriteString(", name=")
	builder.WriteString(fmt.Sprintf("%v", d.Name))
	builder.WriteString(", email=")
	builder.WriteString(d.Email)
	builder.WriteString(", phone=")
	builder.WriteString(d.Phone)
	builder.WriteString(", state=")
	builder.WriteString(fmt.Sprintf("%v", d.State))
	builder.WriteString(", lastConnection=")
	builder.WriteString(d.LastConnection.Format(time.ANSIC))
	builder.WriteString(", volunteer=")
	builder.WriteString(fmt.Sprintf("%v", d.Volunteer))
	builder.WriteByte(')')
	return builder.String()
}

// Doctors is a parsable slice of Doctor.
type Doctors []*Doctor

func (d Doctors) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
