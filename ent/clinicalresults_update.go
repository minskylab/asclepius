// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/google/uuid"
	"github.com/minskylab/asclepius/ent/clinicalresults"
	"github.com/minskylab/asclepius/ent/predicate"
	"github.com/minskylab/asclepius/ent/test"
)

// ClinicalResultsUpdate is the builder for updating ClinicalResults entities.
type ClinicalResultsUpdate struct {
	config
	generalDiscomfort *bool
	fever             *bool
	thirdAge          *bool
	dyspnea           *bool
	test              map[uuid.UUID]struct{}
	clearedTest       bool
	predicates        []predicate.ClinicalResults
}

// Where adds a new predicate for the builder.
func (cru *ClinicalResultsUpdate) Where(ps ...predicate.ClinicalResults) *ClinicalResultsUpdate {
	cru.predicates = append(cru.predicates, ps...)
	return cru
}

// SetGeneralDiscomfort sets the generalDiscomfort field.
func (cru *ClinicalResultsUpdate) SetGeneralDiscomfort(b bool) *ClinicalResultsUpdate {
	cru.generalDiscomfort = &b
	return cru
}

// SetFever sets the fever field.
func (cru *ClinicalResultsUpdate) SetFever(b bool) *ClinicalResultsUpdate {
	cru.fever = &b
	return cru
}

// SetThirdAge sets the thirdAge field.
func (cru *ClinicalResultsUpdate) SetThirdAge(b bool) *ClinicalResultsUpdate {
	cru.thirdAge = &b
	return cru
}

// SetDyspnea sets the dyspnea field.
func (cru *ClinicalResultsUpdate) SetDyspnea(b bool) *ClinicalResultsUpdate {
	cru.dyspnea = &b
	return cru
}

// SetTestID sets the test edge to Test by id.
func (cru *ClinicalResultsUpdate) SetTestID(id uuid.UUID) *ClinicalResultsUpdate {
	if cru.test == nil {
		cru.test = make(map[uuid.UUID]struct{})
	}
	cru.test[id] = struct{}{}
	return cru
}

// SetNillableTestID sets the test edge to Test by id if the given value is not nil.
func (cru *ClinicalResultsUpdate) SetNillableTestID(id *uuid.UUID) *ClinicalResultsUpdate {
	if id != nil {
		cru = cru.SetTestID(*id)
	}
	return cru
}

// SetTest sets the test edge to Test.
func (cru *ClinicalResultsUpdate) SetTest(t *Test) *ClinicalResultsUpdate {
	return cru.SetTestID(t.ID)
}

// ClearTest clears the test edge to Test.
func (cru *ClinicalResultsUpdate) ClearTest() *ClinicalResultsUpdate {
	cru.clearedTest = true
	return cru
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (cru *ClinicalResultsUpdate) Save(ctx context.Context) (int, error) {
	if len(cru.test) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"test\"")
	}
	return cru.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (cru *ClinicalResultsUpdate) SaveX(ctx context.Context) int {
	affected, err := cru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cru *ClinicalResultsUpdate) Exec(ctx context.Context) error {
	_, err := cru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cru *ClinicalResultsUpdate) ExecX(ctx context.Context) {
	if err := cru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cru *ClinicalResultsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   clinicalresults.Table,
			Columns: clinicalresults.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: clinicalresults.FieldID,
			},
		},
	}
	if ps := cru.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value := cru.generalDiscomfort; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  *value,
			Column: clinicalresults.FieldGeneralDiscomfort,
		})
	}
	if value := cru.fever; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  *value,
			Column: clinicalresults.FieldFever,
		})
	}
	if value := cru.thirdAge; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  *value,
			Column: clinicalresults.FieldThirdAge,
		})
	}
	if value := cru.dyspnea; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  *value,
			Column: clinicalresults.FieldDyspnea,
		})
	}
	if cru.clearedTest {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   clinicalresults.TestTable,
			Columns: []string{clinicalresults.TestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: test.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cru.test; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   clinicalresults.TestTable,
			Columns: []string{clinicalresults.TestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: test.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{clinicalresults.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ClinicalResultsUpdateOne is the builder for updating a single ClinicalResults entity.
type ClinicalResultsUpdateOne struct {
	config
	id                uuid.UUID
	generalDiscomfort *bool
	fever             *bool
	thirdAge          *bool
	dyspnea           *bool
	test              map[uuid.UUID]struct{}
	clearedTest       bool
}

// SetGeneralDiscomfort sets the generalDiscomfort field.
func (cruo *ClinicalResultsUpdateOne) SetGeneralDiscomfort(b bool) *ClinicalResultsUpdateOne {
	cruo.generalDiscomfort = &b
	return cruo
}

// SetFever sets the fever field.
func (cruo *ClinicalResultsUpdateOne) SetFever(b bool) *ClinicalResultsUpdateOne {
	cruo.fever = &b
	return cruo
}

// SetThirdAge sets the thirdAge field.
func (cruo *ClinicalResultsUpdateOne) SetThirdAge(b bool) *ClinicalResultsUpdateOne {
	cruo.thirdAge = &b
	return cruo
}

// SetDyspnea sets the dyspnea field.
func (cruo *ClinicalResultsUpdateOne) SetDyspnea(b bool) *ClinicalResultsUpdateOne {
	cruo.dyspnea = &b
	return cruo
}

// SetTestID sets the test edge to Test by id.
func (cruo *ClinicalResultsUpdateOne) SetTestID(id uuid.UUID) *ClinicalResultsUpdateOne {
	if cruo.test == nil {
		cruo.test = make(map[uuid.UUID]struct{})
	}
	cruo.test[id] = struct{}{}
	return cruo
}

// SetNillableTestID sets the test edge to Test by id if the given value is not nil.
func (cruo *ClinicalResultsUpdateOne) SetNillableTestID(id *uuid.UUID) *ClinicalResultsUpdateOne {
	if id != nil {
		cruo = cruo.SetTestID(*id)
	}
	return cruo
}

// SetTest sets the test edge to Test.
func (cruo *ClinicalResultsUpdateOne) SetTest(t *Test) *ClinicalResultsUpdateOne {
	return cruo.SetTestID(t.ID)
}

// ClearTest clears the test edge to Test.
func (cruo *ClinicalResultsUpdateOne) ClearTest() *ClinicalResultsUpdateOne {
	cruo.clearedTest = true
	return cruo
}

// Save executes the query and returns the updated entity.
func (cruo *ClinicalResultsUpdateOne) Save(ctx context.Context) (*ClinicalResults, error) {
	if len(cruo.test) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"test\"")
	}
	return cruo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (cruo *ClinicalResultsUpdateOne) SaveX(ctx context.Context) *ClinicalResults {
	cr, err := cruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return cr
}

// Exec executes the query on the entity.
func (cruo *ClinicalResultsUpdateOne) Exec(ctx context.Context) error {
	_, err := cruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cruo *ClinicalResultsUpdateOne) ExecX(ctx context.Context) {
	if err := cruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cruo *ClinicalResultsUpdateOne) sqlSave(ctx context.Context) (cr *ClinicalResults, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   clinicalresults.Table,
			Columns: clinicalresults.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  cruo.id,
				Type:   field.TypeUUID,
				Column: clinicalresults.FieldID,
			},
		},
	}
	if value := cruo.generalDiscomfort; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  *value,
			Column: clinicalresults.FieldGeneralDiscomfort,
		})
	}
	if value := cruo.fever; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  *value,
			Column: clinicalresults.FieldFever,
		})
	}
	if value := cruo.thirdAge; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  *value,
			Column: clinicalresults.FieldThirdAge,
		})
	}
	if value := cruo.dyspnea; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  *value,
			Column: clinicalresults.FieldDyspnea,
		})
	}
	if cruo.clearedTest {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   clinicalresults.TestTable,
			Columns: []string{clinicalresults.TestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: test.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cruo.test; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   clinicalresults.TestTable,
			Columns: []string{clinicalresults.TestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: test.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	cr = &ClinicalResults{config: cruo.config}
	_spec.Assign = cr.assignValues
	_spec.ScanValues = cr.scanValues()
	if err = sqlgraph.UpdateNode(ctx, cruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{clinicalresults.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return cr, nil
}
