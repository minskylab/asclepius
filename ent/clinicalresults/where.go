// Code generated by entc, DO NOT EDIT.

package clinicalresults

import (
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/minskylab/asclepius/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id uuid.UUID) predicate.ClinicalResults {
	return predicate.ClinicalResults(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ClinicalResults {
	return predicate.ClinicalResults(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ClinicalResults {
	return predicate.ClinicalResults(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ClinicalResults {
	return predicate.ClinicalResults(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ClinicalResults {
	return predicate.ClinicalResults(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ClinicalResults {
	return predicate.ClinicalResults(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ClinicalResults {
	return predicate.ClinicalResults(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ClinicalResults {
	return predicate.ClinicalResults(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ClinicalResults {
	return predicate.ClinicalResults(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// GeneralDiscomfort applies equality check predicate on the "generalDiscomfort" field. It's identical to GeneralDiscomfortEQ.
func GeneralDiscomfort(v bool) predicate.ClinicalResults {
	return predicate.ClinicalResults(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGeneralDiscomfort), v))
	})
}

// Fever applies equality check predicate on the "fever" field. It's identical to FeverEQ.
func Fever(v bool) predicate.ClinicalResults {
	return predicate.ClinicalResults(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFever), v))
	})
}

// ThirdAge applies equality check predicate on the "thirdAge" field. It's identical to ThirdAgeEQ.
func ThirdAge(v bool) predicate.ClinicalResults {
	return predicate.ClinicalResults(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThirdAge), v))
	})
}

// Dyspnea applies equality check predicate on the "dyspnea" field. It's identical to DyspneaEQ.
func Dyspnea(v bool) predicate.ClinicalResults {
	return predicate.ClinicalResults(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDyspnea), v))
	})
}

// GeneralDiscomfortEQ applies the EQ predicate on the "generalDiscomfort" field.
func GeneralDiscomfortEQ(v bool) predicate.ClinicalResults {
	return predicate.ClinicalResults(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGeneralDiscomfort), v))
	})
}

// GeneralDiscomfortNEQ applies the NEQ predicate on the "generalDiscomfort" field.
func GeneralDiscomfortNEQ(v bool) predicate.ClinicalResults {
	return predicate.ClinicalResults(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGeneralDiscomfort), v))
	})
}

// FeverEQ applies the EQ predicate on the "fever" field.
func FeverEQ(v bool) predicate.ClinicalResults {
	return predicate.ClinicalResults(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFever), v))
	})
}

// FeverNEQ applies the NEQ predicate on the "fever" field.
func FeverNEQ(v bool) predicate.ClinicalResults {
	return predicate.ClinicalResults(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFever), v))
	})
}

// ThirdAgeEQ applies the EQ predicate on the "thirdAge" field.
func ThirdAgeEQ(v bool) predicate.ClinicalResults {
	return predicate.ClinicalResults(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThirdAge), v))
	})
}

// ThirdAgeNEQ applies the NEQ predicate on the "thirdAge" field.
func ThirdAgeNEQ(v bool) predicate.ClinicalResults {
	return predicate.ClinicalResults(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldThirdAge), v))
	})
}

// DyspneaEQ applies the EQ predicate on the "dyspnea" field.
func DyspneaEQ(v bool) predicate.ClinicalResults {
	return predicate.ClinicalResults(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDyspnea), v))
	})
}

// DyspneaNEQ applies the NEQ predicate on the "dyspnea" field.
func DyspneaNEQ(v bool) predicate.ClinicalResults {
	return predicate.ClinicalResults(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDyspnea), v))
	})
}

// HasTest applies the HasEdge predicate on the "test" edge.
func HasTest() predicate.ClinicalResults {
	return predicate.ClinicalResults(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TestTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TestTable, TestColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTestWith applies the HasEdge predicate on the "test" edge with a given conditions (other predicates).
func HasTestWith(preds ...predicate.Test) predicate.ClinicalResults {
	return predicate.ClinicalResults(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TestInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TestTable, TestColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.ClinicalResults) predicate.ClinicalResults {
	return predicate.ClinicalResults(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.ClinicalResults) predicate.ClinicalResults {
	return predicate.ClinicalResults(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ClinicalResults) predicate.ClinicalResults {
	return predicate.ClinicalResults(func(s *sql.Selector) {
		p(s.Not())
	})
}
