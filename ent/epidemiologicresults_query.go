// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/google/uuid"
	"github.com/minskylab/asclepius/ent/epidemiologicresults"
	"github.com/minskylab/asclepius/ent/predicate"
	"github.com/minskylab/asclepius/ent/test"
)

// EpidemiologicResultsQuery is the builder for querying EpidemiologicResults entities.
type EpidemiologicResultsQuery struct {
	config
	limit      *int
	offset     *int
	order      []Order
	unique     []string
	predicates []predicate.EpidemiologicResults
	// eager-loading edges.
	withTest *TestQuery
	withFKs  bool
	// intermediate query.
	sql *sql.Selector
}

// Where adds a new predicate for the builder.
func (erq *EpidemiologicResultsQuery) Where(ps ...predicate.EpidemiologicResults) *EpidemiologicResultsQuery {
	erq.predicates = append(erq.predicates, ps...)
	return erq
}

// Limit adds a limit step to the query.
func (erq *EpidemiologicResultsQuery) Limit(limit int) *EpidemiologicResultsQuery {
	erq.limit = &limit
	return erq
}

// Offset adds an offset step to the query.
func (erq *EpidemiologicResultsQuery) Offset(offset int) *EpidemiologicResultsQuery {
	erq.offset = &offset
	return erq
}

// Order adds an order step to the query.
func (erq *EpidemiologicResultsQuery) Order(o ...Order) *EpidemiologicResultsQuery {
	erq.order = append(erq.order, o...)
	return erq
}

// QueryTest chains the current query on the test edge.
func (erq *EpidemiologicResultsQuery) QueryTest() *TestQuery {
	query := &TestQuery{config: erq.config}
	step := sqlgraph.NewStep(
		sqlgraph.From(epidemiologicresults.Table, epidemiologicresults.FieldID, erq.sqlQuery()),
		sqlgraph.To(test.Table, test.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, epidemiologicresults.TestTable, epidemiologicresults.TestColumn),
	)
	query.sql = sqlgraph.SetNeighbors(erq.driver.Dialect(), step)
	return query
}

// First returns the first EpidemiologicResults entity in the query. Returns *NotFoundError when no epidemiologicresults was found.
func (erq *EpidemiologicResultsQuery) First(ctx context.Context) (*EpidemiologicResults, error) {
	ers, err := erq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(ers) == 0 {
		return nil, &NotFoundError{epidemiologicresults.Label}
	}
	return ers[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (erq *EpidemiologicResultsQuery) FirstX(ctx context.Context) *EpidemiologicResults {
	er, err := erq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return er
}

// FirstID returns the first EpidemiologicResults id in the query. Returns *NotFoundError when no id was found.
func (erq *EpidemiologicResultsQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = erq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{epidemiologicresults.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (erq *EpidemiologicResultsQuery) FirstXID(ctx context.Context) uuid.UUID {
	id, err := erq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only EpidemiologicResults entity in the query, returns an error if not exactly one entity was returned.
func (erq *EpidemiologicResultsQuery) Only(ctx context.Context) (*EpidemiologicResults, error) {
	ers, err := erq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(ers) {
	case 1:
		return ers[0], nil
	case 0:
		return nil, &NotFoundError{epidemiologicresults.Label}
	default:
		return nil, &NotSingularError{epidemiologicresults.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (erq *EpidemiologicResultsQuery) OnlyX(ctx context.Context) *EpidemiologicResults {
	er, err := erq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return er
}

// OnlyID returns the only EpidemiologicResults id in the query, returns an error if not exactly one id was returned.
func (erq *EpidemiologicResultsQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = erq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{epidemiologicresults.Label}
	default:
		err = &NotSingularError{epidemiologicresults.Label}
	}
	return
}

// OnlyXID is like OnlyID, but panics if an error occurs.
func (erq *EpidemiologicResultsQuery) OnlyXID(ctx context.Context) uuid.UUID {
	id, err := erq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of EpidemiologicResultsSlice.
func (erq *EpidemiologicResultsQuery) All(ctx context.Context) ([]*EpidemiologicResults, error) {
	return erq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (erq *EpidemiologicResultsQuery) AllX(ctx context.Context) []*EpidemiologicResults {
	ers, err := erq.All(ctx)
	if err != nil {
		panic(err)
	}
	return ers
}

// IDs executes the query and returns a list of EpidemiologicResults ids.
func (erq *EpidemiologicResultsQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	if err := erq.Select(epidemiologicresults.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (erq *EpidemiologicResultsQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := erq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (erq *EpidemiologicResultsQuery) Count(ctx context.Context) (int, error) {
	return erq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (erq *EpidemiologicResultsQuery) CountX(ctx context.Context) int {
	count, err := erq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (erq *EpidemiologicResultsQuery) Exist(ctx context.Context) (bool, error) {
	return erq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (erq *EpidemiologicResultsQuery) ExistX(ctx context.Context) bool {
	exist, err := erq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (erq *EpidemiologicResultsQuery) Clone() *EpidemiologicResultsQuery {
	return &EpidemiologicResultsQuery{
		config:     erq.config,
		limit:      erq.limit,
		offset:     erq.offset,
		order:      append([]Order{}, erq.order...),
		unique:     append([]string{}, erq.unique...),
		predicates: append([]predicate.EpidemiologicResults{}, erq.predicates...),
		// clone intermediate query.
		sql: erq.sql.Clone(),
	}
}

//  WithTest tells the query-builder to eager-loads the nodes that are connected to
// the "test" edge. The optional arguments used to configure the query builder of the edge.
func (erq *EpidemiologicResultsQuery) WithTest(opts ...func(*TestQuery)) *EpidemiologicResultsQuery {
	query := &TestQuery{config: erq.config}
	for _, opt := range opts {
		opt(query)
	}
	erq.withTest = query
	return erq
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		VisitedPlaces []string `json:"visitedPlaces,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.EpidemiologicResults.Query().
//		GroupBy(epidemiologicresults.FieldVisitedPlaces).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (erq *EpidemiologicResultsQuery) GroupBy(field string, fields ...string) *EpidemiologicResultsGroupBy {
	group := &EpidemiologicResultsGroupBy{config: erq.config}
	group.fields = append([]string{field}, fields...)
	group.sql = erq.sqlQuery()
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		VisitedPlaces []string `json:"visitedPlaces,omitempty"`
//	}
//
//	client.EpidemiologicResults.Query().
//		Select(epidemiologicresults.FieldVisitedPlaces).
//		Scan(ctx, &v)
//
func (erq *EpidemiologicResultsQuery) Select(field string, fields ...string) *EpidemiologicResultsSelect {
	selector := &EpidemiologicResultsSelect{config: erq.config}
	selector.fields = append([]string{field}, fields...)
	selector.sql = erq.sqlQuery()
	return selector
}

func (erq *EpidemiologicResultsQuery) sqlAll(ctx context.Context) ([]*EpidemiologicResults, error) {
	var (
		nodes       = []*EpidemiologicResults{}
		withFKs     = erq.withFKs
		_spec       = erq.querySpec()
		loadedTypes = [1]bool{
			erq.withTest != nil,
		}
	)
	if erq.withTest != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, epidemiologicresults.ForeignKeys...)
	}
	_spec.ScanValues = func() []interface{} {
		node := &EpidemiologicResults{config: erq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		if withFKs {
			values = append(values, node.fkValues()...)
		}
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, erq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := erq.withTest; query != nil {
		ids := make([]uuid.UUID, 0, len(nodes))
		nodeids := make(map[uuid.UUID][]*EpidemiologicResults)
		for i := range nodes {
			if fk := nodes[i].test_epidemiologic; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(test.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "test_epidemiologic" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Test = n
			}
		}
	}

	return nodes, nil
}

func (erq *EpidemiologicResultsQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := erq.querySpec()
	return sqlgraph.CountNodes(ctx, erq.driver, _spec)
}

func (erq *EpidemiologicResultsQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := erq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (erq *EpidemiologicResultsQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   epidemiologicresults.Table,
			Columns: epidemiologicresults.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: epidemiologicresults.FieldID,
			},
		},
		From:   erq.sql,
		Unique: true,
	}
	if ps := erq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := erq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := erq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := erq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (erq *EpidemiologicResultsQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(erq.driver.Dialect())
	t1 := builder.Table(epidemiologicresults.Table)
	selector := builder.Select(t1.Columns(epidemiologicresults.Columns...)...).From(t1)
	if erq.sql != nil {
		selector = erq.sql
		selector.Select(selector.Columns(epidemiologicresults.Columns...)...)
	}
	for _, p := range erq.predicates {
		p(selector)
	}
	for _, p := range erq.order {
		p(selector)
	}
	if offset := erq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := erq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// EpidemiologicResultsGroupBy is the builder for group-by EpidemiologicResults entities.
type EpidemiologicResultsGroupBy struct {
	config
	fields []string
	fns    []Aggregate
	// intermediate query.
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ergb *EpidemiologicResultsGroupBy) Aggregate(fns ...Aggregate) *EpidemiologicResultsGroupBy {
	ergb.fns = append(ergb.fns, fns...)
	return ergb
}

// Scan applies the group-by query and scan the result into the given value.
func (ergb *EpidemiologicResultsGroupBy) Scan(ctx context.Context, v interface{}) error {
	return ergb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ergb *EpidemiologicResultsGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := ergb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (ergb *EpidemiologicResultsGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(ergb.fields) > 1 {
		return nil, errors.New("ent: EpidemiologicResultsGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := ergb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ergb *EpidemiologicResultsGroupBy) StringsX(ctx context.Context) []string {
	v, err := ergb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (ergb *EpidemiologicResultsGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(ergb.fields) > 1 {
		return nil, errors.New("ent: EpidemiologicResultsGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := ergb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ergb *EpidemiologicResultsGroupBy) IntsX(ctx context.Context) []int {
	v, err := ergb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (ergb *EpidemiologicResultsGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(ergb.fields) > 1 {
		return nil, errors.New("ent: EpidemiologicResultsGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := ergb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ergb *EpidemiologicResultsGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := ergb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (ergb *EpidemiologicResultsGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(ergb.fields) > 1 {
		return nil, errors.New("ent: EpidemiologicResultsGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := ergb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ergb *EpidemiologicResultsGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := ergb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ergb *EpidemiologicResultsGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := ergb.sqlQuery().Query()
	if err := ergb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ergb *EpidemiologicResultsGroupBy) sqlQuery() *sql.Selector {
	selector := ergb.sql
	columns := make([]string, 0, len(ergb.fields)+len(ergb.fns))
	columns = append(columns, ergb.fields...)
	for _, fn := range ergb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(ergb.fields...)
}

// EpidemiologicResultsSelect is the builder for select fields of EpidemiologicResults entities.
type EpidemiologicResultsSelect struct {
	config
	fields []string
	// intermediate queries.
	sql *sql.Selector
}

// Scan applies the selector query and scan the result into the given value.
func (ers *EpidemiologicResultsSelect) Scan(ctx context.Context, v interface{}) error {
	return ers.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ers *EpidemiologicResultsSelect) ScanX(ctx context.Context, v interface{}) {
	if err := ers.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (ers *EpidemiologicResultsSelect) Strings(ctx context.Context) ([]string, error) {
	if len(ers.fields) > 1 {
		return nil, errors.New("ent: EpidemiologicResultsSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := ers.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ers *EpidemiologicResultsSelect) StringsX(ctx context.Context) []string {
	v, err := ers.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (ers *EpidemiologicResultsSelect) Ints(ctx context.Context) ([]int, error) {
	if len(ers.fields) > 1 {
		return nil, errors.New("ent: EpidemiologicResultsSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := ers.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ers *EpidemiologicResultsSelect) IntsX(ctx context.Context) []int {
	v, err := ers.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (ers *EpidemiologicResultsSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(ers.fields) > 1 {
		return nil, errors.New("ent: EpidemiologicResultsSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := ers.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ers *EpidemiologicResultsSelect) Float64sX(ctx context.Context) []float64 {
	v, err := ers.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (ers *EpidemiologicResultsSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(ers.fields) > 1 {
		return nil, errors.New("ent: EpidemiologicResultsSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := ers.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ers *EpidemiologicResultsSelect) BoolsX(ctx context.Context) []bool {
	v, err := ers.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ers *EpidemiologicResultsSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := ers.sqlQuery().Query()
	if err := ers.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ers *EpidemiologicResultsSelect) sqlQuery() sql.Querier {
	selector := ers.sql
	selector.Select(selector.Columns(ers.fields...)...)
	return selector
}
