// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/google/uuid"
	"github.com/minskylab/asclepius/ent/history"
	"github.com/minskylab/asclepius/ent/medicalnote"
	"github.com/minskylab/asclepius/ent/patient"
	"github.com/minskylab/asclepius/ent/predicate"
	"github.com/minskylab/asclepius/ent/test"
)

// HistoryUpdate is the builder for updating History entities.
type HistoryUpdate struct {
	config
	patient        map[uuid.UUID]struct{}
	tests          map[uuid.UUID]struct{}
	notes          map[uuid.UUID]struct{}
	clearedPatient bool
	removedTests   map[uuid.UUID]struct{}
	removedNotes   map[uuid.UUID]struct{}
	predicates     []predicate.History
}

// Where adds a new predicate for the builder.
func (hu *HistoryUpdate) Where(ps ...predicate.History) *HistoryUpdate {
	hu.predicates = append(hu.predicates, ps...)
	return hu
}

// SetPatientID sets the patient edge to Patient by id.
func (hu *HistoryUpdate) SetPatientID(id uuid.UUID) *HistoryUpdate {
	if hu.patient == nil {
		hu.patient = make(map[uuid.UUID]struct{})
	}
	hu.patient[id] = struct{}{}
	return hu
}

// SetNillablePatientID sets the patient edge to Patient by id if the given value is not nil.
func (hu *HistoryUpdate) SetNillablePatientID(id *uuid.UUID) *HistoryUpdate {
	if id != nil {
		hu = hu.SetPatientID(*id)
	}
	return hu
}

// SetPatient sets the patient edge to Patient.
func (hu *HistoryUpdate) SetPatient(p *Patient) *HistoryUpdate {
	return hu.SetPatientID(p.ID)
}

// AddTestIDs adds the tests edge to Test by ids.
func (hu *HistoryUpdate) AddTestIDs(ids ...uuid.UUID) *HistoryUpdate {
	if hu.tests == nil {
		hu.tests = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		hu.tests[ids[i]] = struct{}{}
	}
	return hu
}

// AddTests adds the tests edges to Test.
func (hu *HistoryUpdate) AddTests(t ...*Test) *HistoryUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return hu.AddTestIDs(ids...)
}

// AddNoteIDs adds the notes edge to MedicalNote by ids.
func (hu *HistoryUpdate) AddNoteIDs(ids ...uuid.UUID) *HistoryUpdate {
	if hu.notes == nil {
		hu.notes = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		hu.notes[ids[i]] = struct{}{}
	}
	return hu
}

// AddNotes adds the notes edges to MedicalNote.
func (hu *HistoryUpdate) AddNotes(m ...*MedicalNote) *HistoryUpdate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return hu.AddNoteIDs(ids...)
}

// ClearPatient clears the patient edge to Patient.
func (hu *HistoryUpdate) ClearPatient() *HistoryUpdate {
	hu.clearedPatient = true
	return hu
}

// RemoveTestIDs removes the tests edge to Test by ids.
func (hu *HistoryUpdate) RemoveTestIDs(ids ...uuid.UUID) *HistoryUpdate {
	if hu.removedTests == nil {
		hu.removedTests = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		hu.removedTests[ids[i]] = struct{}{}
	}
	return hu
}

// RemoveTests removes tests edges to Test.
func (hu *HistoryUpdate) RemoveTests(t ...*Test) *HistoryUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return hu.RemoveTestIDs(ids...)
}

// RemoveNoteIDs removes the notes edge to MedicalNote by ids.
func (hu *HistoryUpdate) RemoveNoteIDs(ids ...uuid.UUID) *HistoryUpdate {
	if hu.removedNotes == nil {
		hu.removedNotes = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		hu.removedNotes[ids[i]] = struct{}{}
	}
	return hu
}

// RemoveNotes removes notes edges to MedicalNote.
func (hu *HistoryUpdate) RemoveNotes(m ...*MedicalNote) *HistoryUpdate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return hu.RemoveNoteIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (hu *HistoryUpdate) Save(ctx context.Context) (int, error) {
	if len(hu.patient) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"patient\"")
	}
	return hu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (hu *HistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := hu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hu *HistoryUpdate) Exec(ctx context.Context) error {
	_, err := hu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hu *HistoryUpdate) ExecX(ctx context.Context) {
	if err := hu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (hu *HistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   history.Table,
			Columns: history.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: history.FieldID,
			},
		},
	}
	if ps := hu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if hu.clearedPatient {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   history.PatientTable,
			Columns: []string{history.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: patient.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.patient; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   history.PatientTable,
			Columns: []string{history.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: patient.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := hu.removedTests; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   history.TestsTable,
			Columns: []string{history.TestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: test.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.tests; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   history.TestsTable,
			Columns: []string{history.TestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: test.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := hu.removedNotes; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   history.NotesTable,
			Columns: []string{history.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: medicalnote.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.notes; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   history.NotesTable,
			Columns: []string{history.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: medicalnote.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{history.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// HistoryUpdateOne is the builder for updating a single History entity.
type HistoryUpdateOne struct {
	config
	id             uuid.UUID
	patient        map[uuid.UUID]struct{}
	tests          map[uuid.UUID]struct{}
	notes          map[uuid.UUID]struct{}
	clearedPatient bool
	removedTests   map[uuid.UUID]struct{}
	removedNotes   map[uuid.UUID]struct{}
}

// SetPatientID sets the patient edge to Patient by id.
func (huo *HistoryUpdateOne) SetPatientID(id uuid.UUID) *HistoryUpdateOne {
	if huo.patient == nil {
		huo.patient = make(map[uuid.UUID]struct{})
	}
	huo.patient[id] = struct{}{}
	return huo
}

// SetNillablePatientID sets the patient edge to Patient by id if the given value is not nil.
func (huo *HistoryUpdateOne) SetNillablePatientID(id *uuid.UUID) *HistoryUpdateOne {
	if id != nil {
		huo = huo.SetPatientID(*id)
	}
	return huo
}

// SetPatient sets the patient edge to Patient.
func (huo *HistoryUpdateOne) SetPatient(p *Patient) *HistoryUpdateOne {
	return huo.SetPatientID(p.ID)
}

// AddTestIDs adds the tests edge to Test by ids.
func (huo *HistoryUpdateOne) AddTestIDs(ids ...uuid.UUID) *HistoryUpdateOne {
	if huo.tests == nil {
		huo.tests = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		huo.tests[ids[i]] = struct{}{}
	}
	return huo
}

// AddTests adds the tests edges to Test.
func (huo *HistoryUpdateOne) AddTests(t ...*Test) *HistoryUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return huo.AddTestIDs(ids...)
}

// AddNoteIDs adds the notes edge to MedicalNote by ids.
func (huo *HistoryUpdateOne) AddNoteIDs(ids ...uuid.UUID) *HistoryUpdateOne {
	if huo.notes == nil {
		huo.notes = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		huo.notes[ids[i]] = struct{}{}
	}
	return huo
}

// AddNotes adds the notes edges to MedicalNote.
func (huo *HistoryUpdateOne) AddNotes(m ...*MedicalNote) *HistoryUpdateOne {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return huo.AddNoteIDs(ids...)
}

// ClearPatient clears the patient edge to Patient.
func (huo *HistoryUpdateOne) ClearPatient() *HistoryUpdateOne {
	huo.clearedPatient = true
	return huo
}

// RemoveTestIDs removes the tests edge to Test by ids.
func (huo *HistoryUpdateOne) RemoveTestIDs(ids ...uuid.UUID) *HistoryUpdateOne {
	if huo.removedTests == nil {
		huo.removedTests = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		huo.removedTests[ids[i]] = struct{}{}
	}
	return huo
}

// RemoveTests removes tests edges to Test.
func (huo *HistoryUpdateOne) RemoveTests(t ...*Test) *HistoryUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return huo.RemoveTestIDs(ids...)
}

// RemoveNoteIDs removes the notes edge to MedicalNote by ids.
func (huo *HistoryUpdateOne) RemoveNoteIDs(ids ...uuid.UUID) *HistoryUpdateOne {
	if huo.removedNotes == nil {
		huo.removedNotes = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		huo.removedNotes[ids[i]] = struct{}{}
	}
	return huo
}

// RemoveNotes removes notes edges to MedicalNote.
func (huo *HistoryUpdateOne) RemoveNotes(m ...*MedicalNote) *HistoryUpdateOne {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return huo.RemoveNoteIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (huo *HistoryUpdateOne) Save(ctx context.Context) (*History, error) {
	if len(huo.patient) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"patient\"")
	}
	return huo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (huo *HistoryUpdateOne) SaveX(ctx context.Context) *History {
	h, err := huo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return h
}

// Exec executes the query on the entity.
func (huo *HistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := huo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (huo *HistoryUpdateOne) ExecX(ctx context.Context) {
	if err := huo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (huo *HistoryUpdateOne) sqlSave(ctx context.Context) (h *History, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   history.Table,
			Columns: history.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  huo.id,
				Type:   field.TypeUUID,
				Column: history.FieldID,
			},
		},
	}
	if huo.clearedPatient {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   history.PatientTable,
			Columns: []string{history.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: patient.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.patient; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   history.PatientTable,
			Columns: []string{history.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: patient.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := huo.removedTests; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   history.TestsTable,
			Columns: []string{history.TestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: test.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.tests; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   history.TestsTable,
			Columns: []string{history.TestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: test.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := huo.removedNotes; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   history.NotesTable,
			Columns: []string{history.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: medicalnote.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.notes; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   history.NotesTable,
			Columns: []string{history.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: medicalnote.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	h = &History{config: huo.config}
	_spec.Assign = h.assignValues
	_spec.ScanValues = h.scanValues()
	if err = sqlgraph.UpdateNode(ctx, huo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{history.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return h, nil
}
