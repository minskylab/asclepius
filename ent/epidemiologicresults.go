// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/minskylab/asclepius/ent/epidemiologicresults"
	"github.com/minskylab/asclepius/ent/test"
)

// EpidemiologicResults is the model entity for the EpidemiologicResults schema.
type EpidemiologicResults struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// VisitedPlaces holds the value of the "visitedPlaces" field.
	VisitedPlaces []string `json:"visitedPlaces,omitempty"`
	// InfectedFamily holds the value of the "infectedFamily" field.
	InfectedFamily bool `json:"infectedFamily,omitempty"`
	// FromInfectedPlace holds the value of the "fromInfectedPlace" field.
	FromInfectedPlace int `json:"fromInfectedPlace,omitempty"`
	// ToInfectedPlace holds the value of the "toInfectedPlace" field.
	ToInfectedPlace int `json:"toInfectedPlace,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EpidemiologicResultsQuery when eager-loading is set.
	Edges              EpidemiologicResultsEdges `json:"edges"`
	test_epidemiologic *uuid.UUID
}

// EpidemiologicResultsEdges holds the relations/edges for other nodes in the graph.
type EpidemiologicResultsEdges struct {
	// Test holds the value of the test edge.
	Test *Test
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TestOrErr returns the Test value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EpidemiologicResultsEdges) TestOrErr() (*Test, error) {
	if e.loadedTypes[0] {
		if e.Test == nil {
			// The edge test was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: test.Label}
		}
		return e.Test, nil
	}
	return nil, &NotLoadedError{edge: "test"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EpidemiologicResults) scanValues() []interface{} {
	return []interface{}{
		&uuid.UUID{},     // id
		&[]byte{},        // visitedPlaces
		&sql.NullBool{},  // infectedFamily
		&sql.NullInt64{}, // fromInfectedPlace
		&sql.NullInt64{}, // toInfectedPlace
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*EpidemiologicResults) fkValues() []interface{} {
	return []interface{}{
		&uuid.UUID{}, // test_epidemiologic
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EpidemiologicResults fields.
func (er *EpidemiologicResults) assignValues(values ...interface{}) error {
	if m, n := len(values), len(epidemiologicresults.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	if value, ok := values[0].(*uuid.UUID); !ok {
		return fmt.Errorf("unexpected type %T for field id", values[0])
	} else if value != nil {
		er.ID = *value
	}
	values = values[1:]

	if value, ok := values[0].(*[]byte); !ok {
		return fmt.Errorf("unexpected type %T for field visitedPlaces", values[0])
	} else if value != nil && len(*value) > 0 {
		if err := json.Unmarshal(*value, &er.VisitedPlaces); err != nil {
			return fmt.Errorf("unmarshal field visitedPlaces: %v", err)
		}
	}
	if value, ok := values[1].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field infectedFamily", values[1])
	} else if value.Valid {
		er.InfectedFamily = value.Bool
	}
	if value, ok := values[2].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field fromInfectedPlace", values[2])
	} else if value.Valid {
		er.FromInfectedPlace = int(value.Int64)
	}
	if value, ok := values[3].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field toInfectedPlace", values[3])
	} else if value.Valid {
		er.ToInfectedPlace = int(value.Int64)
	}
	values = values[4:]
	if len(values) == len(epidemiologicresults.ForeignKeys) {
		if value, ok := values[0].(*uuid.UUID); !ok {
			return fmt.Errorf("unexpected type %T for field test_epidemiologic", values[0])
		} else if value != nil {
			er.test_epidemiologic = value
		}
	}
	return nil
}

// QueryTest queries the test edge of the EpidemiologicResults.
func (er *EpidemiologicResults) QueryTest() *TestQuery {
	return (&EpidemiologicResultsClient{config: er.config}).QueryTest(er)
}

// Update returns a builder for updating this EpidemiologicResults.
// Note that, you need to call EpidemiologicResults.Unwrap() before calling this method, if this EpidemiologicResults
// was returned from a transaction, and the transaction was committed or rolled back.
func (er *EpidemiologicResults) Update() *EpidemiologicResultsUpdateOne {
	return (&EpidemiologicResultsClient{config: er.config}).UpdateOne(er)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (er *EpidemiologicResults) Unwrap() *EpidemiologicResults {
	tx, ok := er.config.driver.(*txDriver)
	if !ok {
		panic("ent: EpidemiologicResults is not a transactional entity")
	}
	er.config.driver = tx.drv
	return er
}

// String implements the fmt.Stringer.
func (er *EpidemiologicResults) String() string {
	var builder strings.Builder
	builder.WriteString("EpidemiologicResults(")
	builder.WriteString(fmt.Sprintf("id=%v", er.ID))
	builder.WriteString(", visitedPlaces=")
	builder.WriteString(fmt.Sprintf("%v", er.VisitedPlaces))
	builder.WriteString(", infectedFamily=")
	builder.WriteString(fmt.Sprintf("%v", er.InfectedFamily))
	builder.WriteString(", fromInfectedPlace=")
	builder.WriteString(fmt.Sprintf("%v", er.FromInfectedPlace))
	builder.WriteString(", toInfectedPlace=")
	builder.WriteString(fmt.Sprintf("%v", er.ToInfectedPlace))
	builder.WriteByte(')')
	return builder.String()
}

// EpidemiologicResultsSlice is a parsable slice of EpidemiologicResults.
type EpidemiologicResultsSlice []*EpidemiologicResults

func (er EpidemiologicResultsSlice) config(cfg config) {
	for _i := range er {
		er[_i].config = cfg
	}
}
