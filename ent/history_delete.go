// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/minskylab/asclepius/ent/history"
	"github.com/minskylab/asclepius/ent/predicate"
)

// HistoryDelete is the builder for deleting a History entity.
type HistoryDelete struct {
	config
	predicates []predicate.History
}

// Where adds a new predicate to the delete builder.
func (hd *HistoryDelete) Where(ps ...predicate.History) *HistoryDelete {
	hd.predicates = append(hd.predicates, ps...)
	return hd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (hd *HistoryDelete) Exec(ctx context.Context) (int, error) {
	return hd.sqlExec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (hd *HistoryDelete) ExecX(ctx context.Context) int {
	n, err := hd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (hd *HistoryDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := &sqlgraph.DeleteSpec{
		Node: &sqlgraph.NodeSpec{
			Table: history.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: history.FieldID,
			},
		},
	}
	if ps := hd.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return sqlgraph.DeleteNodes(ctx, hd.driver, _spec)
}

// HistoryDeleteOne is the builder for deleting a single History entity.
type HistoryDeleteOne struct {
	hd *HistoryDelete
}

// Exec executes the deletion query.
func (hdo *HistoryDeleteOne) Exec(ctx context.Context) error {
	n, err := hdo.hd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{history.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (hdo *HistoryDeleteOne) ExecX(ctx context.Context) {
	hdo.hd.ExecX(ctx)
}
