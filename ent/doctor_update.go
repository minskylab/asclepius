// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/google/uuid"
	"github.com/minskylab/asclepius/ent/doctor"
	"github.com/minskylab/asclepius/ent/medicalnote"
	"github.com/minskylab/asclepius/ent/predicate"
	"github.com/minskylab/asclepius/ent/task"
)

// DoctorUpdate is the builder for updating Doctor entities.
type DoctorUpdate struct {
	config
	name                *[]string
	email               *string
	phone               *string
	state               *doctor.State
	lastConnection      *time.Time
	clearlastConnection bool
	volunteer           *bool
	notes               map[uuid.UUID]struct{}
	tasks               map[uuid.UUID]struct{}
	removedNotes        map[uuid.UUID]struct{}
	removedTasks        map[uuid.UUID]struct{}
	predicates          []predicate.Doctor
}

// Where adds a new predicate for the builder.
func (du *DoctorUpdate) Where(ps ...predicate.Doctor) *DoctorUpdate {
	du.predicates = append(du.predicates, ps...)
	return du
}

// SetName sets the name field.
func (du *DoctorUpdate) SetName(s []string) *DoctorUpdate {
	du.name = &s
	return du
}

// SetEmail sets the email field.
func (du *DoctorUpdate) SetEmail(s string) *DoctorUpdate {
	du.email = &s
	return du
}

// SetPhone sets the phone field.
func (du *DoctorUpdate) SetPhone(s string) *DoctorUpdate {
	du.phone = &s
	return du
}

// SetState sets the state field.
func (du *DoctorUpdate) SetState(d doctor.State) *DoctorUpdate {
	du.state = &d
	return du
}

// SetLastConnection sets the lastConnection field.
func (du *DoctorUpdate) SetLastConnection(t time.Time) *DoctorUpdate {
	du.lastConnection = &t
	return du
}

// SetNillableLastConnection sets the lastConnection field if the given value is not nil.
func (du *DoctorUpdate) SetNillableLastConnection(t *time.Time) *DoctorUpdate {
	if t != nil {
		du.SetLastConnection(*t)
	}
	return du
}

// ClearLastConnection clears the value of lastConnection.
func (du *DoctorUpdate) ClearLastConnection() *DoctorUpdate {
	du.lastConnection = nil
	du.clearlastConnection = true
	return du
}

// SetVolunteer sets the volunteer field.
func (du *DoctorUpdate) SetVolunteer(b bool) *DoctorUpdate {
	du.volunteer = &b
	return du
}

// SetNillableVolunteer sets the volunteer field if the given value is not nil.
func (du *DoctorUpdate) SetNillableVolunteer(b *bool) *DoctorUpdate {
	if b != nil {
		du.SetVolunteer(*b)
	}
	return du
}

// AddNoteIDs adds the notes edge to MedicalNote by ids.
func (du *DoctorUpdate) AddNoteIDs(ids ...uuid.UUID) *DoctorUpdate {
	if du.notes == nil {
		du.notes = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		du.notes[ids[i]] = struct{}{}
	}
	return du
}

// AddNotes adds the notes edges to MedicalNote.
func (du *DoctorUpdate) AddNotes(m ...*MedicalNote) *DoctorUpdate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return du.AddNoteIDs(ids...)
}

// AddTaskIDs adds the tasks edge to Task by ids.
func (du *DoctorUpdate) AddTaskIDs(ids ...uuid.UUID) *DoctorUpdate {
	if du.tasks == nil {
		du.tasks = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		du.tasks[ids[i]] = struct{}{}
	}
	return du
}

// AddTasks adds the tasks edges to Task.
func (du *DoctorUpdate) AddTasks(t ...*Task) *DoctorUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return du.AddTaskIDs(ids...)
}

// RemoveNoteIDs removes the notes edge to MedicalNote by ids.
func (du *DoctorUpdate) RemoveNoteIDs(ids ...uuid.UUID) *DoctorUpdate {
	if du.removedNotes == nil {
		du.removedNotes = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		du.removedNotes[ids[i]] = struct{}{}
	}
	return du
}

// RemoveNotes removes notes edges to MedicalNote.
func (du *DoctorUpdate) RemoveNotes(m ...*MedicalNote) *DoctorUpdate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return du.RemoveNoteIDs(ids...)
}

// RemoveTaskIDs removes the tasks edge to Task by ids.
func (du *DoctorUpdate) RemoveTaskIDs(ids ...uuid.UUID) *DoctorUpdate {
	if du.removedTasks == nil {
		du.removedTasks = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		du.removedTasks[ids[i]] = struct{}{}
	}
	return du
}

// RemoveTasks removes tasks edges to Task.
func (du *DoctorUpdate) RemoveTasks(t ...*Task) *DoctorUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return du.RemoveTaskIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (du *DoctorUpdate) Save(ctx context.Context) (int, error) {
	if du.state != nil {
		if err := doctor.StateValidator(*du.state); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"state\": %v", err)
		}
	}
	return du.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DoctorUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DoctorUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DoctorUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

func (du *DoctorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   doctor.Table,
			Columns: doctor.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: doctor.FieldID,
			},
		},
	}
	if ps := du.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value := du.name; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  *value,
			Column: doctor.FieldName,
		})
	}
	if value := du.email; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: doctor.FieldEmail,
		})
	}
	if value := du.phone; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: doctor.FieldPhone,
		})
	}
	if value := du.state; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  *value,
			Column: doctor.FieldState,
		})
	}
	if value := du.lastConnection; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: doctor.FieldLastConnection,
		})
	}
	if du.clearlastConnection {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: doctor.FieldLastConnection,
		})
	}
	if value := du.volunteer; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  *value,
			Column: doctor.FieldVolunteer,
		})
	}
	if nodes := du.removedNotes; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   doctor.NotesTable,
			Columns: []string{doctor.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: medicalnote.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.notes; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   doctor.NotesTable,
			Columns: []string{doctor.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: medicalnote.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := du.removedTasks; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   doctor.TasksTable,
			Columns: doctor.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: task.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.tasks; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   doctor.TasksTable,
			Columns: doctor.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: task.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{doctor.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// DoctorUpdateOne is the builder for updating a single Doctor entity.
type DoctorUpdateOne struct {
	config
	id                  uuid.UUID
	name                *[]string
	email               *string
	phone               *string
	state               *doctor.State
	lastConnection      *time.Time
	clearlastConnection bool
	volunteer           *bool
	notes               map[uuid.UUID]struct{}
	tasks               map[uuid.UUID]struct{}
	removedNotes        map[uuid.UUID]struct{}
	removedTasks        map[uuid.UUID]struct{}
}

// SetName sets the name field.
func (duo *DoctorUpdateOne) SetName(s []string) *DoctorUpdateOne {
	duo.name = &s
	return duo
}

// SetEmail sets the email field.
func (duo *DoctorUpdateOne) SetEmail(s string) *DoctorUpdateOne {
	duo.email = &s
	return duo
}

// SetPhone sets the phone field.
func (duo *DoctorUpdateOne) SetPhone(s string) *DoctorUpdateOne {
	duo.phone = &s
	return duo
}

// SetState sets the state field.
func (duo *DoctorUpdateOne) SetState(d doctor.State) *DoctorUpdateOne {
	duo.state = &d
	return duo
}

// SetLastConnection sets the lastConnection field.
func (duo *DoctorUpdateOne) SetLastConnection(t time.Time) *DoctorUpdateOne {
	duo.lastConnection = &t
	return duo
}

// SetNillableLastConnection sets the lastConnection field if the given value is not nil.
func (duo *DoctorUpdateOne) SetNillableLastConnection(t *time.Time) *DoctorUpdateOne {
	if t != nil {
		duo.SetLastConnection(*t)
	}
	return duo
}

// ClearLastConnection clears the value of lastConnection.
func (duo *DoctorUpdateOne) ClearLastConnection() *DoctorUpdateOne {
	duo.lastConnection = nil
	duo.clearlastConnection = true
	return duo
}

// SetVolunteer sets the volunteer field.
func (duo *DoctorUpdateOne) SetVolunteer(b bool) *DoctorUpdateOne {
	duo.volunteer = &b
	return duo
}

// SetNillableVolunteer sets the volunteer field if the given value is not nil.
func (duo *DoctorUpdateOne) SetNillableVolunteer(b *bool) *DoctorUpdateOne {
	if b != nil {
		duo.SetVolunteer(*b)
	}
	return duo
}

// AddNoteIDs adds the notes edge to MedicalNote by ids.
func (duo *DoctorUpdateOne) AddNoteIDs(ids ...uuid.UUID) *DoctorUpdateOne {
	if duo.notes == nil {
		duo.notes = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		duo.notes[ids[i]] = struct{}{}
	}
	return duo
}

// AddNotes adds the notes edges to MedicalNote.
func (duo *DoctorUpdateOne) AddNotes(m ...*MedicalNote) *DoctorUpdateOne {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return duo.AddNoteIDs(ids...)
}

// AddTaskIDs adds the tasks edge to Task by ids.
func (duo *DoctorUpdateOne) AddTaskIDs(ids ...uuid.UUID) *DoctorUpdateOne {
	if duo.tasks == nil {
		duo.tasks = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		duo.tasks[ids[i]] = struct{}{}
	}
	return duo
}

// AddTasks adds the tasks edges to Task.
func (duo *DoctorUpdateOne) AddTasks(t ...*Task) *DoctorUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return duo.AddTaskIDs(ids...)
}

// RemoveNoteIDs removes the notes edge to MedicalNote by ids.
func (duo *DoctorUpdateOne) RemoveNoteIDs(ids ...uuid.UUID) *DoctorUpdateOne {
	if duo.removedNotes == nil {
		duo.removedNotes = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		duo.removedNotes[ids[i]] = struct{}{}
	}
	return duo
}

// RemoveNotes removes notes edges to MedicalNote.
func (duo *DoctorUpdateOne) RemoveNotes(m ...*MedicalNote) *DoctorUpdateOne {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return duo.RemoveNoteIDs(ids...)
}

// RemoveTaskIDs removes the tasks edge to Task by ids.
func (duo *DoctorUpdateOne) RemoveTaskIDs(ids ...uuid.UUID) *DoctorUpdateOne {
	if duo.removedTasks == nil {
		duo.removedTasks = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		duo.removedTasks[ids[i]] = struct{}{}
	}
	return duo
}

// RemoveTasks removes tasks edges to Task.
func (duo *DoctorUpdateOne) RemoveTasks(t ...*Task) *DoctorUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return duo.RemoveTaskIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (duo *DoctorUpdateOne) Save(ctx context.Context) (*Doctor, error) {
	if duo.state != nil {
		if err := doctor.StateValidator(*duo.state); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"state\": %v", err)
		}
	}
	return duo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DoctorUpdateOne) SaveX(ctx context.Context) *Doctor {
	d, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return d
}

// Exec executes the query on the entity.
func (duo *DoctorUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DoctorUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (duo *DoctorUpdateOne) sqlSave(ctx context.Context) (d *Doctor, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   doctor.Table,
			Columns: doctor.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  duo.id,
				Type:   field.TypeUUID,
				Column: doctor.FieldID,
			},
		},
	}
	if value := duo.name; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  *value,
			Column: doctor.FieldName,
		})
	}
	if value := duo.email; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: doctor.FieldEmail,
		})
	}
	if value := duo.phone; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: doctor.FieldPhone,
		})
	}
	if value := duo.state; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  *value,
			Column: doctor.FieldState,
		})
	}
	if value := duo.lastConnection; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: doctor.FieldLastConnection,
		})
	}
	if duo.clearlastConnection {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: doctor.FieldLastConnection,
		})
	}
	if value := duo.volunteer; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  *value,
			Column: doctor.FieldVolunteer,
		})
	}
	if nodes := duo.removedNotes; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   doctor.NotesTable,
			Columns: []string{doctor.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: medicalnote.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.notes; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   doctor.NotesTable,
			Columns: []string{doctor.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: medicalnote.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := duo.removedTasks; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   doctor.TasksTable,
			Columns: doctor.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: task.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.tasks; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   doctor.TasksTable,
			Columns: doctor.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: task.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	d = &Doctor{config: duo.config}
	_spec.Assign = d.assignValues
	_spec.ScanValues = d.scanValues()
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{doctor.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return d, nil
}
