// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/google/uuid"
	"github.com/minskylab/asclepius/ent/doctor"
	"github.com/minskylab/asclepius/ent/predicate"
	"github.com/minskylab/asclepius/ent/task"
	"github.com/minskylab/asclepius/ent/taskresponse"
)

// TaskResponseUpdate is the builder for updating TaskResponse entities.
type TaskResponseUpdate struct {
	config
	at            *time.Time
	lastChange    *time.Time
	observations  *[]string
	meta          *[]string
	clearmeta     bool
	author        map[uuid.UUID]struct{}
	task          map[uuid.UUID]struct{}
	clearedAuthor bool
	clearedTask   bool
	predicates    []predicate.TaskResponse
}

// Where adds a new predicate for the builder.
func (tru *TaskResponseUpdate) Where(ps ...predicate.TaskResponse) *TaskResponseUpdate {
	tru.predicates = append(tru.predicates, ps...)
	return tru
}

// SetAt sets the at field.
func (tru *TaskResponseUpdate) SetAt(t time.Time) *TaskResponseUpdate {
	tru.at = &t
	return tru
}

// SetNillableAt sets the at field if the given value is not nil.
func (tru *TaskResponseUpdate) SetNillableAt(t *time.Time) *TaskResponseUpdate {
	if t != nil {
		tru.SetAt(*t)
	}
	return tru
}

// SetLastChange sets the lastChange field.
func (tru *TaskResponseUpdate) SetLastChange(t time.Time) *TaskResponseUpdate {
	tru.lastChange = &t
	return tru
}

// SetNillableLastChange sets the lastChange field if the given value is not nil.
func (tru *TaskResponseUpdate) SetNillableLastChange(t *time.Time) *TaskResponseUpdate {
	if t != nil {
		tru.SetLastChange(*t)
	}
	return tru
}

// SetObservations sets the observations field.
func (tru *TaskResponseUpdate) SetObservations(s []string) *TaskResponseUpdate {
	tru.observations = &s
	return tru
}

// SetMeta sets the meta field.
func (tru *TaskResponseUpdate) SetMeta(s []string) *TaskResponseUpdate {
	tru.meta = &s
	return tru
}

// ClearMeta clears the value of meta.
func (tru *TaskResponseUpdate) ClearMeta() *TaskResponseUpdate {
	tru.meta = nil
	tru.clearmeta = true
	return tru
}

// SetAuthorID sets the author edge to Doctor by id.
func (tru *TaskResponseUpdate) SetAuthorID(id uuid.UUID) *TaskResponseUpdate {
	if tru.author == nil {
		tru.author = make(map[uuid.UUID]struct{})
	}
	tru.author[id] = struct{}{}
	return tru
}

// SetAuthor sets the author edge to Doctor.
func (tru *TaskResponseUpdate) SetAuthor(d *Doctor) *TaskResponseUpdate {
	return tru.SetAuthorID(d.ID)
}

// SetTaskID sets the task edge to Task by id.
func (tru *TaskResponseUpdate) SetTaskID(id uuid.UUID) *TaskResponseUpdate {
	if tru.task == nil {
		tru.task = make(map[uuid.UUID]struct{})
	}
	tru.task[id] = struct{}{}
	return tru
}

// SetTask sets the task edge to Task.
func (tru *TaskResponseUpdate) SetTask(t *Task) *TaskResponseUpdate {
	return tru.SetTaskID(t.ID)
}

// ClearAuthor clears the author edge to Doctor.
func (tru *TaskResponseUpdate) ClearAuthor() *TaskResponseUpdate {
	tru.clearedAuthor = true
	return tru
}

// ClearTask clears the task edge to Task.
func (tru *TaskResponseUpdate) ClearTask() *TaskResponseUpdate {
	tru.clearedTask = true
	return tru
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (tru *TaskResponseUpdate) Save(ctx context.Context) (int, error) {
	if len(tru.author) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"author\"")
	}
	if tru.clearedAuthor && tru.author == nil {
		return 0, errors.New("ent: clearing a unique edge \"author\"")
	}
	if len(tru.task) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"task\"")
	}
	if tru.clearedTask && tru.task == nil {
		return 0, errors.New("ent: clearing a unique edge \"task\"")
	}
	return tru.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (tru *TaskResponseUpdate) SaveX(ctx context.Context) int {
	affected, err := tru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tru *TaskResponseUpdate) Exec(ctx context.Context) error {
	_, err := tru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tru *TaskResponseUpdate) ExecX(ctx context.Context) {
	if err := tru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tru *TaskResponseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   taskresponse.Table,
			Columns: taskresponse.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: taskresponse.FieldID,
			},
		},
	}
	if ps := tru.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value := tru.at; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: taskresponse.FieldAt,
		})
	}
	if value := tru.lastChange; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: taskresponse.FieldLastChange,
		})
	}
	if value := tru.observations; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  *value,
			Column: taskresponse.FieldObservations,
		})
	}
	if value := tru.meta; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  *value,
			Column: taskresponse.FieldMeta,
		})
	}
	if tru.clearmeta {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: taskresponse.FieldMeta,
		})
	}
	if tru.clearedAuthor {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskresponse.AuthorTable,
			Columns: []string{taskresponse.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: doctor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tru.author; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskresponse.AuthorTable,
			Columns: []string{taskresponse.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: doctor.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tru.clearedTask {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskresponse.TaskTable,
			Columns: []string{taskresponse.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: task.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tru.task; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskresponse.TaskTable,
			Columns: []string{taskresponse.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: task.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{taskresponse.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// TaskResponseUpdateOne is the builder for updating a single TaskResponse entity.
type TaskResponseUpdateOne struct {
	config
	id            uuid.UUID
	at            *time.Time
	lastChange    *time.Time
	observations  *[]string
	meta          *[]string
	clearmeta     bool
	author        map[uuid.UUID]struct{}
	task          map[uuid.UUID]struct{}
	clearedAuthor bool
	clearedTask   bool
}

// SetAt sets the at field.
func (truo *TaskResponseUpdateOne) SetAt(t time.Time) *TaskResponseUpdateOne {
	truo.at = &t
	return truo
}

// SetNillableAt sets the at field if the given value is not nil.
func (truo *TaskResponseUpdateOne) SetNillableAt(t *time.Time) *TaskResponseUpdateOne {
	if t != nil {
		truo.SetAt(*t)
	}
	return truo
}

// SetLastChange sets the lastChange field.
func (truo *TaskResponseUpdateOne) SetLastChange(t time.Time) *TaskResponseUpdateOne {
	truo.lastChange = &t
	return truo
}

// SetNillableLastChange sets the lastChange field if the given value is not nil.
func (truo *TaskResponseUpdateOne) SetNillableLastChange(t *time.Time) *TaskResponseUpdateOne {
	if t != nil {
		truo.SetLastChange(*t)
	}
	return truo
}

// SetObservations sets the observations field.
func (truo *TaskResponseUpdateOne) SetObservations(s []string) *TaskResponseUpdateOne {
	truo.observations = &s
	return truo
}

// SetMeta sets the meta field.
func (truo *TaskResponseUpdateOne) SetMeta(s []string) *TaskResponseUpdateOne {
	truo.meta = &s
	return truo
}

// ClearMeta clears the value of meta.
func (truo *TaskResponseUpdateOne) ClearMeta() *TaskResponseUpdateOne {
	truo.meta = nil
	truo.clearmeta = true
	return truo
}

// SetAuthorID sets the author edge to Doctor by id.
func (truo *TaskResponseUpdateOne) SetAuthorID(id uuid.UUID) *TaskResponseUpdateOne {
	if truo.author == nil {
		truo.author = make(map[uuid.UUID]struct{})
	}
	truo.author[id] = struct{}{}
	return truo
}

// SetAuthor sets the author edge to Doctor.
func (truo *TaskResponseUpdateOne) SetAuthor(d *Doctor) *TaskResponseUpdateOne {
	return truo.SetAuthorID(d.ID)
}

// SetTaskID sets the task edge to Task by id.
func (truo *TaskResponseUpdateOne) SetTaskID(id uuid.UUID) *TaskResponseUpdateOne {
	if truo.task == nil {
		truo.task = make(map[uuid.UUID]struct{})
	}
	truo.task[id] = struct{}{}
	return truo
}

// SetTask sets the task edge to Task.
func (truo *TaskResponseUpdateOne) SetTask(t *Task) *TaskResponseUpdateOne {
	return truo.SetTaskID(t.ID)
}

// ClearAuthor clears the author edge to Doctor.
func (truo *TaskResponseUpdateOne) ClearAuthor() *TaskResponseUpdateOne {
	truo.clearedAuthor = true
	return truo
}

// ClearTask clears the task edge to Task.
func (truo *TaskResponseUpdateOne) ClearTask() *TaskResponseUpdateOne {
	truo.clearedTask = true
	return truo
}

// Save executes the query and returns the updated entity.
func (truo *TaskResponseUpdateOne) Save(ctx context.Context) (*TaskResponse, error) {
	if len(truo.author) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"author\"")
	}
	if truo.clearedAuthor && truo.author == nil {
		return nil, errors.New("ent: clearing a unique edge \"author\"")
	}
	if len(truo.task) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"task\"")
	}
	if truo.clearedTask && truo.task == nil {
		return nil, errors.New("ent: clearing a unique edge \"task\"")
	}
	return truo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (truo *TaskResponseUpdateOne) SaveX(ctx context.Context) *TaskResponse {
	tr, err := truo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return tr
}

// Exec executes the query on the entity.
func (truo *TaskResponseUpdateOne) Exec(ctx context.Context) error {
	_, err := truo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (truo *TaskResponseUpdateOne) ExecX(ctx context.Context) {
	if err := truo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (truo *TaskResponseUpdateOne) sqlSave(ctx context.Context) (tr *TaskResponse, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   taskresponse.Table,
			Columns: taskresponse.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  truo.id,
				Type:   field.TypeUUID,
				Column: taskresponse.FieldID,
			},
		},
	}
	if value := truo.at; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: taskresponse.FieldAt,
		})
	}
	if value := truo.lastChange; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: taskresponse.FieldLastChange,
		})
	}
	if value := truo.observations; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  *value,
			Column: taskresponse.FieldObservations,
		})
	}
	if value := truo.meta; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  *value,
			Column: taskresponse.FieldMeta,
		})
	}
	if truo.clearmeta {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: taskresponse.FieldMeta,
		})
	}
	if truo.clearedAuthor {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskresponse.AuthorTable,
			Columns: []string{taskresponse.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: doctor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := truo.author; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskresponse.AuthorTable,
			Columns: []string{taskresponse.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: doctor.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if truo.clearedTask {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskresponse.TaskTable,
			Columns: []string{taskresponse.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: task.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := truo.task; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskresponse.TaskTable,
			Columns: []string{taskresponse.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: task.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	tr = &TaskResponse{config: truo.config}
	_spec.Assign = tr.assignValues
	_spec.ScanValues = tr.scanValues()
	if err = sqlgraph.UpdateNode(ctx, truo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{taskresponse.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return tr, nil
}
