// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/google/uuid"
	"github.com/minskylab/asclepius/ent/patient"
	"github.com/minskylab/asclepius/ent/schedule"
	"github.com/minskylab/asclepius/ent/task"
)

// ScheduleCreate is the builder for creating a Schedule entity.
type ScheduleCreate struct {
	config
	id      *uuid.UUID
	tasks   map[uuid.UUID]struct{}
	patient map[uuid.UUID]struct{}
}

// SetID sets the id field.
func (sc *ScheduleCreate) SetID(u uuid.UUID) *ScheduleCreate {
	sc.id = &u
	return sc
}

// AddTaskIDs adds the tasks edge to Task by ids.
func (sc *ScheduleCreate) AddTaskIDs(ids ...uuid.UUID) *ScheduleCreate {
	if sc.tasks == nil {
		sc.tasks = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		sc.tasks[ids[i]] = struct{}{}
	}
	return sc
}

// AddTasks adds the tasks edges to Task.
func (sc *ScheduleCreate) AddTasks(t ...*Task) *ScheduleCreate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return sc.AddTaskIDs(ids...)
}

// SetPatientID sets the patient edge to Patient by id.
func (sc *ScheduleCreate) SetPatientID(id uuid.UUID) *ScheduleCreate {
	if sc.patient == nil {
		sc.patient = make(map[uuid.UUID]struct{})
	}
	sc.patient[id] = struct{}{}
	return sc
}

// SetNillablePatientID sets the patient edge to Patient by id if the given value is not nil.
func (sc *ScheduleCreate) SetNillablePatientID(id *uuid.UUID) *ScheduleCreate {
	if id != nil {
		sc = sc.SetPatientID(*id)
	}
	return sc
}

// SetPatient sets the patient edge to Patient.
func (sc *ScheduleCreate) SetPatient(p *Patient) *ScheduleCreate {
	return sc.SetPatientID(p.ID)
}

// Save creates the Schedule in the database.
func (sc *ScheduleCreate) Save(ctx context.Context) (*Schedule, error) {
	if len(sc.patient) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"patient\"")
	}
	return sc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *ScheduleCreate) SaveX(ctx context.Context) *Schedule {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (sc *ScheduleCreate) sqlSave(ctx context.Context) (*Schedule, error) {
	var (
		s     = &Schedule{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: schedule.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: schedule.FieldID,
			},
		}
	)
	if value := sc.id; value != nil {
		s.ID = *value
		_spec.ID.Value = *value
	}
	if nodes := sc.tasks; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   schedule.TasksTable,
			Columns: []string{schedule.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: task.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.patient; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   schedule.PatientTable,
			Columns: []string{schedule.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: patient.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return s, nil
}
