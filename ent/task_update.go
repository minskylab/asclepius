// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/google/uuid"
	"github.com/minskylab/asclepius/ent/doctor"
	"github.com/minskylab/asclepius/ent/predicate"
	"github.com/minskylab/asclepius/ent/schedule"
	"github.com/minskylab/asclepius/ent/task"
)

// TaskUpdate is the builder for updating Task entities.
type TaskUpdate struct {
	config

	startAt            *time.Time
	endsAt             *time.Time
	description        *[]string
	cleardescription   bool
	responsible        map[uuid.UUID]struct{}
	schedule           map[uuid.UUID]struct{}
	removedResponsible map[uuid.UUID]struct{}
	clearedSchedule    bool
	predicates         []predicate.Task
}

// Where adds a new predicate for the builder.
func (tu *TaskUpdate) Where(ps ...predicate.Task) *TaskUpdate {
	tu.predicates = append(tu.predicates, ps...)
	return tu
}

// SetStartAt sets the startAt field.
func (tu *TaskUpdate) SetStartAt(t time.Time) *TaskUpdate {
	tu.startAt = &t
	return tu
}

// SetNillableStartAt sets the startAt field if the given value is not nil.
func (tu *TaskUpdate) SetNillableStartAt(t *time.Time) *TaskUpdate {
	if t != nil {
		tu.SetStartAt(*t)
	}
	return tu
}

// SetEndsAt sets the endsAt field.
func (tu *TaskUpdate) SetEndsAt(t time.Time) *TaskUpdate {
	tu.endsAt = &t
	return tu
}

// SetNillableEndsAt sets the endsAt field if the given value is not nil.
func (tu *TaskUpdate) SetNillableEndsAt(t *time.Time) *TaskUpdate {
	if t != nil {
		tu.SetEndsAt(*t)
	}
	return tu
}

// SetDescription sets the description field.
func (tu *TaskUpdate) SetDescription(s []string) *TaskUpdate {
	tu.description = &s
	return tu
}

// ClearDescription clears the value of description.
func (tu *TaskUpdate) ClearDescription() *TaskUpdate {
	tu.description = nil
	tu.cleardescription = true
	return tu
}

// AddResponsibleIDs adds the responsible edge to Doctor by ids.
func (tu *TaskUpdate) AddResponsibleIDs(ids ...uuid.UUID) *TaskUpdate {
	if tu.responsible == nil {
		tu.responsible = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		tu.responsible[ids[i]] = struct{}{}
	}
	return tu
}

// AddResponsible adds the responsible edges to Doctor.
func (tu *TaskUpdate) AddResponsible(d ...*Doctor) *TaskUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return tu.AddResponsibleIDs(ids...)
}

// SetScheduleID sets the schedule edge to Schedule by id.
func (tu *TaskUpdate) SetScheduleID(id uuid.UUID) *TaskUpdate {
	if tu.schedule == nil {
		tu.schedule = make(map[uuid.UUID]struct{})
	}
	tu.schedule[id] = struct{}{}
	return tu
}

// SetNillableScheduleID sets the schedule edge to Schedule by id if the given value is not nil.
func (tu *TaskUpdate) SetNillableScheduleID(id *uuid.UUID) *TaskUpdate {
	if id != nil {
		tu = tu.SetScheduleID(*id)
	}
	return tu
}

// SetSchedule sets the schedule edge to Schedule.
func (tu *TaskUpdate) SetSchedule(s *Schedule) *TaskUpdate {
	return tu.SetScheduleID(s.ID)
}

// RemoveResponsibleIDs removes the responsible edge to Doctor by ids.
func (tu *TaskUpdate) RemoveResponsibleIDs(ids ...uuid.UUID) *TaskUpdate {
	if tu.removedResponsible == nil {
		tu.removedResponsible = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		tu.removedResponsible[ids[i]] = struct{}{}
	}
	return tu
}

// RemoveResponsible removes responsible edges to Doctor.
func (tu *TaskUpdate) RemoveResponsible(d ...*Doctor) *TaskUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return tu.RemoveResponsibleIDs(ids...)
}

// ClearSchedule clears the schedule edge to Schedule.
func (tu *TaskUpdate) ClearSchedule() *TaskUpdate {
	tu.clearedSchedule = true
	return tu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (tu *TaskUpdate) Save(ctx context.Context) (int, error) {
	if len(tu.schedule) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"schedule\"")
	}
	return tu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TaskUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TaskUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TaskUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   task.Table,
			Columns: task.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: task.FieldID,
			},
		},
	}
	if ps := tu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value := tu.startAt; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: task.FieldStartAt,
		})
	}
	if value := tu.endsAt; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: task.FieldEndsAt,
		})
	}
	if value := tu.description; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  *value,
			Column: task.FieldDescription,
		})
	}
	if tu.cleardescription {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: task.FieldDescription,
		})
	}
	if nodes := tu.removedResponsible; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   task.ResponsibleTable,
			Columns: task.ResponsiblePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: doctor.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.responsible; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   task.ResponsibleTable,
			Columns: task.ResponsiblePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: doctor.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.clearedSchedule {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.ScheduleTable,
			Columns: []string{task.ScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: schedule.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.schedule; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.ScheduleTable,
			Columns: []string{task.ScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: schedule.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// TaskUpdateOne is the builder for updating a single Task entity.
type TaskUpdateOne struct {
	config
	id uuid.UUID

	startAt            *time.Time
	endsAt             *time.Time
	description        *[]string
	cleardescription   bool
	responsible        map[uuid.UUID]struct{}
	schedule           map[uuid.UUID]struct{}
	removedResponsible map[uuid.UUID]struct{}
	clearedSchedule    bool
}

// SetStartAt sets the startAt field.
func (tuo *TaskUpdateOne) SetStartAt(t time.Time) *TaskUpdateOne {
	tuo.startAt = &t
	return tuo
}

// SetNillableStartAt sets the startAt field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableStartAt(t *time.Time) *TaskUpdateOne {
	if t != nil {
		tuo.SetStartAt(*t)
	}
	return tuo
}

// SetEndsAt sets the endsAt field.
func (tuo *TaskUpdateOne) SetEndsAt(t time.Time) *TaskUpdateOne {
	tuo.endsAt = &t
	return tuo
}

// SetNillableEndsAt sets the endsAt field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableEndsAt(t *time.Time) *TaskUpdateOne {
	if t != nil {
		tuo.SetEndsAt(*t)
	}
	return tuo
}

// SetDescription sets the description field.
func (tuo *TaskUpdateOne) SetDescription(s []string) *TaskUpdateOne {
	tuo.description = &s
	return tuo
}

// ClearDescription clears the value of description.
func (tuo *TaskUpdateOne) ClearDescription() *TaskUpdateOne {
	tuo.description = nil
	tuo.cleardescription = true
	return tuo
}

// AddResponsibleIDs adds the responsible edge to Doctor by ids.
func (tuo *TaskUpdateOne) AddResponsibleIDs(ids ...uuid.UUID) *TaskUpdateOne {
	if tuo.responsible == nil {
		tuo.responsible = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		tuo.responsible[ids[i]] = struct{}{}
	}
	return tuo
}

// AddResponsible adds the responsible edges to Doctor.
func (tuo *TaskUpdateOne) AddResponsible(d ...*Doctor) *TaskUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return tuo.AddResponsibleIDs(ids...)
}

// SetScheduleID sets the schedule edge to Schedule by id.
func (tuo *TaskUpdateOne) SetScheduleID(id uuid.UUID) *TaskUpdateOne {
	if tuo.schedule == nil {
		tuo.schedule = make(map[uuid.UUID]struct{})
	}
	tuo.schedule[id] = struct{}{}
	return tuo
}

// SetNillableScheduleID sets the schedule edge to Schedule by id if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableScheduleID(id *uuid.UUID) *TaskUpdateOne {
	if id != nil {
		tuo = tuo.SetScheduleID(*id)
	}
	return tuo
}

// SetSchedule sets the schedule edge to Schedule.
func (tuo *TaskUpdateOne) SetSchedule(s *Schedule) *TaskUpdateOne {
	return tuo.SetScheduleID(s.ID)
}

// RemoveResponsibleIDs removes the responsible edge to Doctor by ids.
func (tuo *TaskUpdateOne) RemoveResponsibleIDs(ids ...uuid.UUID) *TaskUpdateOne {
	if tuo.removedResponsible == nil {
		tuo.removedResponsible = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		tuo.removedResponsible[ids[i]] = struct{}{}
	}
	return tuo
}

// RemoveResponsible removes responsible edges to Doctor.
func (tuo *TaskUpdateOne) RemoveResponsible(d ...*Doctor) *TaskUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return tuo.RemoveResponsibleIDs(ids...)
}

// ClearSchedule clears the schedule edge to Schedule.
func (tuo *TaskUpdateOne) ClearSchedule() *TaskUpdateOne {
	tuo.clearedSchedule = true
	return tuo
}

// Save executes the query and returns the updated entity.
func (tuo *TaskUpdateOne) Save(ctx context.Context) (*Task, error) {
	if len(tuo.schedule) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"schedule\"")
	}
	return tuo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TaskUpdateOne) SaveX(ctx context.Context) *Task {
	t, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return t
}

// Exec executes the query on the entity.
func (tuo *TaskUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TaskUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TaskUpdateOne) sqlSave(ctx context.Context) (t *Task, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   task.Table,
			Columns: task.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  tuo.id,
				Type:   field.TypeUUID,
				Column: task.FieldID,
			},
		},
	}
	if value := tuo.startAt; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: task.FieldStartAt,
		})
	}
	if value := tuo.endsAt; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: task.FieldEndsAt,
		})
	}
	if value := tuo.description; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  *value,
			Column: task.FieldDescription,
		})
	}
	if tuo.cleardescription {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: task.FieldDescription,
		})
	}
	if nodes := tuo.removedResponsible; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   task.ResponsibleTable,
			Columns: task.ResponsiblePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: doctor.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.responsible; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   task.ResponsibleTable,
			Columns: task.ResponsiblePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: doctor.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.clearedSchedule {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.ScheduleTable,
			Columns: []string{task.ScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: schedule.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.schedule; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.ScheduleTable,
			Columns: []string{task.ScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: schedule.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	t = &Task{config: tuo.config}
	_spec.Assign = t.assignValues
	_spec.ScanValues = t.scanValues()
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return t, nil
}
