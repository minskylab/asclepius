// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/google/uuid"
	"github.com/minskylab/asclepius/ent/clinicalresults"
	"github.com/minskylab/asclepius/ent/epidemiologicresults"
	"github.com/minskylab/asclepius/ent/history"
	"github.com/minskylab/asclepius/ent/test"
)

// TestCreate is the builder for creating a Test entity.
type TestCreate struct {
	config
	id            *uuid.UUID
	notes         *[]string
	history       map[uuid.UUID]struct{}
	clinical      map[uuid.UUID]struct{}
	epidemiologic map[uuid.UUID]struct{}
}

// SetNotes sets the notes field.
func (tc *TestCreate) SetNotes(s []string) *TestCreate {
	tc.notes = &s
	return tc
}

// SetID sets the id field.
func (tc *TestCreate) SetID(u uuid.UUID) *TestCreate {
	tc.id = &u
	return tc
}

// SetHistoryID sets the history edge to History by id.
func (tc *TestCreate) SetHistoryID(id uuid.UUID) *TestCreate {
	if tc.history == nil {
		tc.history = make(map[uuid.UUID]struct{})
	}
	tc.history[id] = struct{}{}
	return tc
}

// SetNillableHistoryID sets the history edge to History by id if the given value is not nil.
func (tc *TestCreate) SetNillableHistoryID(id *uuid.UUID) *TestCreate {
	if id != nil {
		tc = tc.SetHistoryID(*id)
	}
	return tc
}

// SetHistory sets the history edge to History.
func (tc *TestCreate) SetHistory(h *History) *TestCreate {
	return tc.SetHistoryID(h.ID)
}

// AddClinicalIDs adds the clinical edge to ClinicalResults by ids.
func (tc *TestCreate) AddClinicalIDs(ids ...uuid.UUID) *TestCreate {
	if tc.clinical == nil {
		tc.clinical = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		tc.clinical[ids[i]] = struct{}{}
	}
	return tc
}

// AddClinical adds the clinical edges to ClinicalResults.
func (tc *TestCreate) AddClinical(c ...*ClinicalResults) *TestCreate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tc.AddClinicalIDs(ids...)
}

// AddEpidemiologicIDs adds the epidemiologic edge to EpidemiologicResults by ids.
func (tc *TestCreate) AddEpidemiologicIDs(ids ...uuid.UUID) *TestCreate {
	if tc.epidemiologic == nil {
		tc.epidemiologic = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		tc.epidemiologic[ids[i]] = struct{}{}
	}
	return tc
}

// AddEpidemiologic adds the epidemiologic edges to EpidemiologicResults.
func (tc *TestCreate) AddEpidemiologic(e ...*EpidemiologicResults) *TestCreate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return tc.AddEpidemiologicIDs(ids...)
}

// Save creates the Test in the database.
func (tc *TestCreate) Save(ctx context.Context) (*Test, error) {
	if len(tc.history) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"history\"")
	}
	return tc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TestCreate) SaveX(ctx context.Context) *Test {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (tc *TestCreate) sqlSave(ctx context.Context) (*Test, error) {
	var (
		t     = &Test{config: tc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: test.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: test.FieldID,
			},
		}
	)
	if value := tc.id; value != nil {
		t.ID = *value
		_spec.ID.Value = *value
	}
	if value := tc.notes; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  *value,
			Column: test.FieldNotes,
		})
		t.Notes = *value
	}
	if nodes := tc.history; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   test.HistoryTable,
			Columns: []string{test.HistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: history.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.clinical; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   test.ClinicalTable,
			Columns: []string{test.ClinicalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: clinicalresults.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.epidemiologic; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   test.EpidemiologicTable,
			Columns: []string{test.EpidemiologicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: epidemiologicresults.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return t, nil
}
