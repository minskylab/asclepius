// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/minskylab/asclepius/ent/clinicalresults"
	"github.com/minskylab/asclepius/ent/test"
)

// ClinicalResults is the model entity for the ClinicalResults schema.
type ClinicalResults struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// GeneralDiscomfort holds the value of the "generalDiscomfort" field.
	GeneralDiscomfort bool `json:"generalDiscomfort,omitempty"`
	// Fever holds the value of the "fever" field.
	Fever bool `json:"fever,omitempty"`
	// ThirdAge holds the value of the "thirdAge" field.
	ThirdAge bool `json:"thirdAge,omitempty"`
	// Dyspnea holds the value of the "dyspnea" field.
	Dyspnea bool `json:"dyspnea,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ClinicalResultsQuery when eager-loading is set.
	Edges         ClinicalResultsEdges `json:"edges"`
	test_clinical *uuid.UUID
}

// ClinicalResultsEdges holds the relations/edges for other nodes in the graph.
type ClinicalResultsEdges struct {
	// Test holds the value of the test edge.
	Test *Test
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TestOrErr returns the Test value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ClinicalResultsEdges) TestOrErr() (*Test, error) {
	if e.loadedTypes[0] {
		if e.Test == nil {
			// The edge test was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: test.Label}
		}
		return e.Test, nil
	}
	return nil, &NotLoadedError{edge: "test"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ClinicalResults) scanValues() []interface{} {
	return []interface{}{
		&uuid.UUID{},    // id
		&sql.NullBool{}, // generalDiscomfort
		&sql.NullBool{}, // fever
		&sql.NullBool{}, // thirdAge
		&sql.NullBool{}, // dyspnea
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*ClinicalResults) fkValues() []interface{} {
	return []interface{}{
		&uuid.UUID{}, // test_clinical
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ClinicalResults fields.
func (cr *ClinicalResults) assignValues(values ...interface{}) error {
	if m, n := len(values), len(clinicalresults.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	if value, ok := values[0].(*uuid.UUID); !ok {
		return fmt.Errorf("unexpected type %T for field id", values[0])
	} else if value != nil {
		cr.ID = *value
	}
	values = values[1:]
	if value, ok := values[0].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field generalDiscomfort", values[0])
	} else if value.Valid {
		cr.GeneralDiscomfort = value.Bool
	}
	if value, ok := values[1].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field fever", values[1])
	} else if value.Valid {
		cr.Fever = value.Bool
	}
	if value, ok := values[2].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field thirdAge", values[2])
	} else if value.Valid {
		cr.ThirdAge = value.Bool
	}
	if value, ok := values[3].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field dyspnea", values[3])
	} else if value.Valid {
		cr.Dyspnea = value.Bool
	}
	values = values[4:]
	if len(values) == len(clinicalresults.ForeignKeys) {
		if value, ok := values[0].(*uuid.UUID); !ok {
			return fmt.Errorf("unexpected type %T for field test_clinical", values[0])
		} else if value != nil {
			cr.test_clinical = value
		}
	}
	return nil
}

// QueryTest queries the test edge of the ClinicalResults.
func (cr *ClinicalResults) QueryTest() *TestQuery {
	return (&ClinicalResultsClient{config: cr.config}).QueryTest(cr)
}

// Update returns a builder for updating this ClinicalResults.
// Note that, you need to call ClinicalResults.Unwrap() before calling this method, if this ClinicalResults
// was returned from a transaction, and the transaction was committed or rolled back.
func (cr *ClinicalResults) Update() *ClinicalResultsUpdateOne {
	return (&ClinicalResultsClient{config: cr.config}).UpdateOne(cr)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (cr *ClinicalResults) Unwrap() *ClinicalResults {
	tx, ok := cr.config.driver.(*txDriver)
	if !ok {
		panic("ent: ClinicalResults is not a transactional entity")
	}
	cr.config.driver = tx.drv
	return cr
}

// String implements the fmt.Stringer.
func (cr *ClinicalResults) String() string {
	var builder strings.Builder
	builder.WriteString("ClinicalResults(")
	builder.WriteString(fmt.Sprintf("id=%v", cr.ID))
	builder.WriteString(", generalDiscomfort=")
	builder.WriteString(fmt.Sprintf("%v", cr.GeneralDiscomfort))
	builder.WriteString(", fever=")
	builder.WriteString(fmt.Sprintf("%v", cr.Fever))
	builder.WriteString(", thirdAge=")
	builder.WriteString(fmt.Sprintf("%v", cr.ThirdAge))
	builder.WriteString(", dyspnea=")
	builder.WriteString(fmt.Sprintf("%v", cr.Dyspnea))
	builder.WriteByte(')')
	return builder.String()
}

// ClinicalResultsSlice is a parsable slice of ClinicalResults.
type ClinicalResultsSlice []*ClinicalResults

func (cr ClinicalResultsSlice) config(cfg config) {
	for _i := range cr {
		cr[_i].config = cfg
	}
}
