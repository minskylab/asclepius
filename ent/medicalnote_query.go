// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/google/uuid"
	"github.com/minskylab/asclepius/ent/history"
	"github.com/minskylab/asclepius/ent/medicalnote"
	"github.com/minskylab/asclepius/ent/medicus"
	"github.com/minskylab/asclepius/ent/predicate"
)

// MedicalNoteQuery is the builder for querying MedicalNote entities.
type MedicalNoteQuery struct {
	config
	limit      *int
	offset     *int
	order      []Order
	unique     []string
	predicates []predicate.MedicalNote
	// eager-loading edges.
	withHistory *HistoryQuery
	withOwner   *MedicusQuery
	withFKs     bool
	// intermediate query.
	sql *sql.Selector
}

// Where adds a new predicate for the builder.
func (mnq *MedicalNoteQuery) Where(ps ...predicate.MedicalNote) *MedicalNoteQuery {
	mnq.predicates = append(mnq.predicates, ps...)
	return mnq
}

// Limit adds a limit step to the query.
func (mnq *MedicalNoteQuery) Limit(limit int) *MedicalNoteQuery {
	mnq.limit = &limit
	return mnq
}

// Offset adds an offset step to the query.
func (mnq *MedicalNoteQuery) Offset(offset int) *MedicalNoteQuery {
	mnq.offset = &offset
	return mnq
}

// Order adds an order step to the query.
func (mnq *MedicalNoteQuery) Order(o ...Order) *MedicalNoteQuery {
	mnq.order = append(mnq.order, o...)
	return mnq
}

// QueryHistory chains the current query on the history edge.
func (mnq *MedicalNoteQuery) QueryHistory() *HistoryQuery {
	query := &HistoryQuery{config: mnq.config}
	step := sqlgraph.NewStep(
		sqlgraph.From(medicalnote.Table, medicalnote.FieldID, mnq.sqlQuery()),
		sqlgraph.To(history.Table, history.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, medicalnote.HistoryTable, medicalnote.HistoryColumn),
	)
	query.sql = sqlgraph.SetNeighbors(mnq.driver.Dialect(), step)
	return query
}

// QueryOwner chains the current query on the owner edge.
func (mnq *MedicalNoteQuery) QueryOwner() *MedicusQuery {
	query := &MedicusQuery{config: mnq.config}
	step := sqlgraph.NewStep(
		sqlgraph.From(medicalnote.Table, medicalnote.FieldID, mnq.sqlQuery()),
		sqlgraph.To(medicus.Table, medicus.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, medicalnote.OwnerTable, medicalnote.OwnerColumn),
	)
	query.sql = sqlgraph.SetNeighbors(mnq.driver.Dialect(), step)
	return query
}

// First returns the first MedicalNote entity in the query. Returns *NotFoundError when no medicalnote was found.
func (mnq *MedicalNoteQuery) First(ctx context.Context) (*MedicalNote, error) {
	mns, err := mnq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(mns) == 0 {
		return nil, &NotFoundError{medicalnote.Label}
	}
	return mns[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (mnq *MedicalNoteQuery) FirstX(ctx context.Context) *MedicalNote {
	mn, err := mnq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return mn
}

// FirstID returns the first MedicalNote id in the query. Returns *NotFoundError when no id was found.
func (mnq *MedicalNoteQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = mnq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{medicalnote.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (mnq *MedicalNoteQuery) FirstXID(ctx context.Context) uuid.UUID {
	id, err := mnq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only MedicalNote entity in the query, returns an error if not exactly one entity was returned.
func (mnq *MedicalNoteQuery) Only(ctx context.Context) (*MedicalNote, error) {
	mns, err := mnq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(mns) {
	case 1:
		return mns[0], nil
	case 0:
		return nil, &NotFoundError{medicalnote.Label}
	default:
		return nil, &NotSingularError{medicalnote.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (mnq *MedicalNoteQuery) OnlyX(ctx context.Context) *MedicalNote {
	mn, err := mnq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return mn
}

// OnlyID returns the only MedicalNote id in the query, returns an error if not exactly one id was returned.
func (mnq *MedicalNoteQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = mnq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{medicalnote.Label}
	default:
		err = &NotSingularError{medicalnote.Label}
	}
	return
}

// OnlyXID is like OnlyID, but panics if an error occurs.
func (mnq *MedicalNoteQuery) OnlyXID(ctx context.Context) uuid.UUID {
	id, err := mnq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of MedicalNotes.
func (mnq *MedicalNoteQuery) All(ctx context.Context) ([]*MedicalNote, error) {
	return mnq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (mnq *MedicalNoteQuery) AllX(ctx context.Context) []*MedicalNote {
	mns, err := mnq.All(ctx)
	if err != nil {
		panic(err)
	}
	return mns
}

// IDs executes the query and returns a list of MedicalNote ids.
func (mnq *MedicalNoteQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	if err := mnq.Select(medicalnote.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (mnq *MedicalNoteQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := mnq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (mnq *MedicalNoteQuery) Count(ctx context.Context) (int, error) {
	return mnq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (mnq *MedicalNoteQuery) CountX(ctx context.Context) int {
	count, err := mnq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (mnq *MedicalNoteQuery) Exist(ctx context.Context) (bool, error) {
	return mnq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (mnq *MedicalNoteQuery) ExistX(ctx context.Context) bool {
	exist, err := mnq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (mnq *MedicalNoteQuery) Clone() *MedicalNoteQuery {
	return &MedicalNoteQuery{
		config:     mnq.config,
		limit:      mnq.limit,
		offset:     mnq.offset,
		order:      append([]Order{}, mnq.order...),
		unique:     append([]string{}, mnq.unique...),
		predicates: append([]predicate.MedicalNote{}, mnq.predicates...),
		// clone intermediate query.
		sql: mnq.sql.Clone(),
	}
}

//  WithHistory tells the query-builder to eager-loads the nodes that are connected to
// the "history" edge. The optional arguments used to configure the query builder of the edge.
func (mnq *MedicalNoteQuery) WithHistory(opts ...func(*HistoryQuery)) *MedicalNoteQuery {
	query := &HistoryQuery{config: mnq.config}
	for _, opt := range opts {
		opt(query)
	}
	mnq.withHistory = query
	return mnq
}

//  WithOwner tells the query-builder to eager-loads the nodes that are connected to
// the "owner" edge. The optional arguments used to configure the query builder of the edge.
func (mnq *MedicalNoteQuery) WithOwner(opts ...func(*MedicusQuery)) *MedicalNoteQuery {
	query := &MedicusQuery{config: mnq.config}
	for _, opt := range opts {
		opt(query)
	}
	mnq.withOwner = query
	return mnq
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		At time.Time `json:"at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.MedicalNote.Query().
//		GroupBy(medicalnote.FieldAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (mnq *MedicalNoteQuery) GroupBy(field string, fields ...string) *MedicalNoteGroupBy {
	group := &MedicalNoteGroupBy{config: mnq.config}
	group.fields = append([]string{field}, fields...)
	group.sql = mnq.sqlQuery()
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		At time.Time `json:"at,omitempty"`
//	}
//
//	client.MedicalNote.Query().
//		Select(medicalnote.FieldAt).
//		Scan(ctx, &v)
//
func (mnq *MedicalNoteQuery) Select(field string, fields ...string) *MedicalNoteSelect {
	selector := &MedicalNoteSelect{config: mnq.config}
	selector.fields = append([]string{field}, fields...)
	selector.sql = mnq.sqlQuery()
	return selector
}

func (mnq *MedicalNoteQuery) sqlAll(ctx context.Context) ([]*MedicalNote, error) {
	var (
		nodes       = []*MedicalNote{}
		withFKs     = mnq.withFKs
		_spec       = mnq.querySpec()
		loadedTypes = [2]bool{
			mnq.withHistory != nil,
			mnq.withOwner != nil,
		}
	)
	if mnq.withHistory != nil || mnq.withOwner != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, medicalnote.ForeignKeys...)
	}
	_spec.ScanValues = func() []interface{} {
		node := &MedicalNote{config: mnq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		if withFKs {
			values = append(values, node.fkValues()...)
		}
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, mnq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := mnq.withHistory; query != nil {
		ids := make([]uuid.UUID, 0, len(nodes))
		nodeids := make(map[uuid.UUID][]*MedicalNote)
		for i := range nodes {
			if fk := nodes[i].history_notes; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(history.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "history_notes" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.History = n
			}
		}
	}

	if query := mnq.withOwner; query != nil {
		ids := make([]uuid.UUID, 0, len(nodes))
		nodeids := make(map[uuid.UUID][]*MedicalNote)
		for i := range nodes {
			if fk := nodes[i].medicus_notes; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(medicus.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "medicus_notes" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Owner = n
			}
		}
	}

	return nodes, nil
}

func (mnq *MedicalNoteQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := mnq.querySpec()
	return sqlgraph.CountNodes(ctx, mnq.driver, _spec)
}

func (mnq *MedicalNoteQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := mnq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (mnq *MedicalNoteQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   medicalnote.Table,
			Columns: medicalnote.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: medicalnote.FieldID,
			},
		},
		From:   mnq.sql,
		Unique: true,
	}
	if ps := mnq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := mnq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := mnq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := mnq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (mnq *MedicalNoteQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(mnq.driver.Dialect())
	t1 := builder.Table(medicalnote.Table)
	selector := builder.Select(t1.Columns(medicalnote.Columns...)...).From(t1)
	if mnq.sql != nil {
		selector = mnq.sql
		selector.Select(selector.Columns(medicalnote.Columns...)...)
	}
	for _, p := range mnq.predicates {
		p(selector)
	}
	for _, p := range mnq.order {
		p(selector)
	}
	if offset := mnq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := mnq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// MedicalNoteGroupBy is the builder for group-by MedicalNote entities.
type MedicalNoteGroupBy struct {
	config
	fields []string
	fns    []Aggregate
	// intermediate query.
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the group-by query.
func (mngb *MedicalNoteGroupBy) Aggregate(fns ...Aggregate) *MedicalNoteGroupBy {
	mngb.fns = append(mngb.fns, fns...)
	return mngb
}

// Scan applies the group-by query and scan the result into the given value.
func (mngb *MedicalNoteGroupBy) Scan(ctx context.Context, v interface{}) error {
	return mngb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (mngb *MedicalNoteGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := mngb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (mngb *MedicalNoteGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(mngb.fields) > 1 {
		return nil, errors.New("ent: MedicalNoteGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := mngb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (mngb *MedicalNoteGroupBy) StringsX(ctx context.Context) []string {
	v, err := mngb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (mngb *MedicalNoteGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(mngb.fields) > 1 {
		return nil, errors.New("ent: MedicalNoteGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := mngb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (mngb *MedicalNoteGroupBy) IntsX(ctx context.Context) []int {
	v, err := mngb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (mngb *MedicalNoteGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(mngb.fields) > 1 {
		return nil, errors.New("ent: MedicalNoteGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := mngb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (mngb *MedicalNoteGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := mngb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (mngb *MedicalNoteGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(mngb.fields) > 1 {
		return nil, errors.New("ent: MedicalNoteGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := mngb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (mngb *MedicalNoteGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := mngb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (mngb *MedicalNoteGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := mngb.sqlQuery().Query()
	if err := mngb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (mngb *MedicalNoteGroupBy) sqlQuery() *sql.Selector {
	selector := mngb.sql
	columns := make([]string, 0, len(mngb.fields)+len(mngb.fns))
	columns = append(columns, mngb.fields...)
	for _, fn := range mngb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(mngb.fields...)
}

// MedicalNoteSelect is the builder for select fields of MedicalNote entities.
type MedicalNoteSelect struct {
	config
	fields []string
	// intermediate queries.
	sql *sql.Selector
}

// Scan applies the selector query and scan the result into the given value.
func (mns *MedicalNoteSelect) Scan(ctx context.Context, v interface{}) error {
	return mns.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (mns *MedicalNoteSelect) ScanX(ctx context.Context, v interface{}) {
	if err := mns.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (mns *MedicalNoteSelect) Strings(ctx context.Context) ([]string, error) {
	if len(mns.fields) > 1 {
		return nil, errors.New("ent: MedicalNoteSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := mns.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (mns *MedicalNoteSelect) StringsX(ctx context.Context) []string {
	v, err := mns.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (mns *MedicalNoteSelect) Ints(ctx context.Context) ([]int, error) {
	if len(mns.fields) > 1 {
		return nil, errors.New("ent: MedicalNoteSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := mns.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (mns *MedicalNoteSelect) IntsX(ctx context.Context) []int {
	v, err := mns.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (mns *MedicalNoteSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(mns.fields) > 1 {
		return nil, errors.New("ent: MedicalNoteSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := mns.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (mns *MedicalNoteSelect) Float64sX(ctx context.Context) []float64 {
	v, err := mns.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (mns *MedicalNoteSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(mns.fields) > 1 {
		return nil, errors.New("ent: MedicalNoteSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := mns.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (mns *MedicalNoteSelect) BoolsX(ctx context.Context) []bool {
	v, err := mns.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (mns *MedicalNoteSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := mns.sqlQuery().Query()
	if err := mns.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (mns *MedicalNoteSelect) sqlQuery() sql.Querier {
	selector := mns.sql
	selector.Select(selector.Columns(mns.fields...)...)
	return selector
}
