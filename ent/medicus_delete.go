// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/minskylab/asclepius/ent/medicus"
	"github.com/minskylab/asclepius/ent/predicate"
)

// MedicusDelete is the builder for deleting a Medicus entity.
type MedicusDelete struct {
	config
	predicates []predicate.Medicus
}

// Where adds a new predicate to the delete builder.
func (md *MedicusDelete) Where(ps ...predicate.Medicus) *MedicusDelete {
	md.predicates = append(md.predicates, ps...)
	return md
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (md *MedicusDelete) Exec(ctx context.Context) (int, error) {
	return md.sqlExec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (md *MedicusDelete) ExecX(ctx context.Context) int {
	n, err := md.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (md *MedicusDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := &sqlgraph.DeleteSpec{
		Node: &sqlgraph.NodeSpec{
			Table: medicus.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: medicus.FieldID,
			},
		},
	}
	if ps := md.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return sqlgraph.DeleteNodes(ctx, md.driver, _spec)
}

// MedicusDeleteOne is the builder for deleting a single Medicus entity.
type MedicusDeleteOne struct {
	md *MedicusDelete
}

// Exec executes the deletion query.
func (mdo *MedicusDeleteOne) Exec(ctx context.Context) error {
	n, err := mdo.md.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{medicus.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (mdo *MedicusDeleteOne) ExecX(ctx context.Context) {
	mdo.md.ExecX(ctx)
}
