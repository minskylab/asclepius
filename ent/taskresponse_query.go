// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/google/uuid"
	"github.com/minskylab/asclepius/ent/doctor"
	"github.com/minskylab/asclepius/ent/predicate"
	"github.com/minskylab/asclepius/ent/task"
	"github.com/minskylab/asclepius/ent/taskresponse"
)

// TaskResponseQuery is the builder for querying TaskResponse entities.
type TaskResponseQuery struct {
	config
	limit      *int
	offset     *int
	order      []Order
	unique     []string
	predicates []predicate.TaskResponse
	// eager-loading edges.
	withAuthor *DoctorQuery
	withTask   *TaskQuery
	withFKs    bool
	// intermediate query.
	sql *sql.Selector
}

// Where adds a new predicate for the builder.
func (trq *TaskResponseQuery) Where(ps ...predicate.TaskResponse) *TaskResponseQuery {
	trq.predicates = append(trq.predicates, ps...)
	return trq
}

// Limit adds a limit step to the query.
func (trq *TaskResponseQuery) Limit(limit int) *TaskResponseQuery {
	trq.limit = &limit
	return trq
}

// Offset adds an offset step to the query.
func (trq *TaskResponseQuery) Offset(offset int) *TaskResponseQuery {
	trq.offset = &offset
	return trq
}

// Order adds an order step to the query.
func (trq *TaskResponseQuery) Order(o ...Order) *TaskResponseQuery {
	trq.order = append(trq.order, o...)
	return trq
}

// QueryAuthor chains the current query on the author edge.
func (trq *TaskResponseQuery) QueryAuthor() *DoctorQuery {
	query := &DoctorQuery{config: trq.config}
	step := sqlgraph.NewStep(
		sqlgraph.From(taskresponse.Table, taskresponse.FieldID, trq.sqlQuery()),
		sqlgraph.To(doctor.Table, doctor.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, taskresponse.AuthorTable, taskresponse.AuthorColumn),
	)
	query.sql = sqlgraph.SetNeighbors(trq.driver.Dialect(), step)
	return query
}

// QueryTask chains the current query on the task edge.
func (trq *TaskResponseQuery) QueryTask() *TaskQuery {
	query := &TaskQuery{config: trq.config}
	step := sqlgraph.NewStep(
		sqlgraph.From(taskresponse.Table, taskresponse.FieldID, trq.sqlQuery()),
		sqlgraph.To(task.Table, task.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, taskresponse.TaskTable, taskresponse.TaskColumn),
	)
	query.sql = sqlgraph.SetNeighbors(trq.driver.Dialect(), step)
	return query
}

// First returns the first TaskResponse entity in the query. Returns *NotFoundError when no taskresponse was found.
func (trq *TaskResponseQuery) First(ctx context.Context) (*TaskResponse, error) {
	trs, err := trq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(trs) == 0 {
		return nil, &NotFoundError{taskresponse.Label}
	}
	return trs[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (trq *TaskResponseQuery) FirstX(ctx context.Context) *TaskResponse {
	tr, err := trq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return tr
}

// FirstID returns the first TaskResponse id in the query. Returns *NotFoundError when no id was found.
func (trq *TaskResponseQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = trq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{taskresponse.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (trq *TaskResponseQuery) FirstXID(ctx context.Context) uuid.UUID {
	id, err := trq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only TaskResponse entity in the query, returns an error if not exactly one entity was returned.
func (trq *TaskResponseQuery) Only(ctx context.Context) (*TaskResponse, error) {
	trs, err := trq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(trs) {
	case 1:
		return trs[0], nil
	case 0:
		return nil, &NotFoundError{taskresponse.Label}
	default:
		return nil, &NotSingularError{taskresponse.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (trq *TaskResponseQuery) OnlyX(ctx context.Context) *TaskResponse {
	tr, err := trq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return tr
}

// OnlyID returns the only TaskResponse id in the query, returns an error if not exactly one id was returned.
func (trq *TaskResponseQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = trq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{taskresponse.Label}
	default:
		err = &NotSingularError{taskresponse.Label}
	}
	return
}

// OnlyXID is like OnlyID, but panics if an error occurs.
func (trq *TaskResponseQuery) OnlyXID(ctx context.Context) uuid.UUID {
	id, err := trq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TaskResponses.
func (trq *TaskResponseQuery) All(ctx context.Context) ([]*TaskResponse, error) {
	return trq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (trq *TaskResponseQuery) AllX(ctx context.Context) []*TaskResponse {
	trs, err := trq.All(ctx)
	if err != nil {
		panic(err)
	}
	return trs
}

// IDs executes the query and returns a list of TaskResponse ids.
func (trq *TaskResponseQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	if err := trq.Select(taskresponse.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (trq *TaskResponseQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := trq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (trq *TaskResponseQuery) Count(ctx context.Context) (int, error) {
	return trq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (trq *TaskResponseQuery) CountX(ctx context.Context) int {
	count, err := trq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (trq *TaskResponseQuery) Exist(ctx context.Context) (bool, error) {
	return trq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (trq *TaskResponseQuery) ExistX(ctx context.Context) bool {
	exist, err := trq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (trq *TaskResponseQuery) Clone() *TaskResponseQuery {
	return &TaskResponseQuery{
		config:     trq.config,
		limit:      trq.limit,
		offset:     trq.offset,
		order:      append([]Order{}, trq.order...),
		unique:     append([]string{}, trq.unique...),
		predicates: append([]predicate.TaskResponse{}, trq.predicates...),
		// clone intermediate query.
		sql: trq.sql.Clone(),
	}
}

//  WithAuthor tells the query-builder to eager-loads the nodes that are connected to
// the "author" edge. The optional arguments used to configure the query builder of the edge.
func (trq *TaskResponseQuery) WithAuthor(opts ...func(*DoctorQuery)) *TaskResponseQuery {
	query := &DoctorQuery{config: trq.config}
	for _, opt := range opts {
		opt(query)
	}
	trq.withAuthor = query
	return trq
}

//  WithTask tells the query-builder to eager-loads the nodes that are connected to
// the "task" edge. The optional arguments used to configure the query builder of the edge.
func (trq *TaskResponseQuery) WithTask(opts ...func(*TaskQuery)) *TaskResponseQuery {
	query := &TaskQuery{config: trq.config}
	for _, opt := range opts {
		opt(query)
	}
	trq.withTask = query
	return trq
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		At time.Time `json:"at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TaskResponse.Query().
//		GroupBy(taskresponse.FieldAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (trq *TaskResponseQuery) GroupBy(field string, fields ...string) *TaskResponseGroupBy {
	group := &TaskResponseGroupBy{config: trq.config}
	group.fields = append([]string{field}, fields...)
	group.sql = trq.sqlQuery()
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		At time.Time `json:"at,omitempty"`
//	}
//
//	client.TaskResponse.Query().
//		Select(taskresponse.FieldAt).
//		Scan(ctx, &v)
//
func (trq *TaskResponseQuery) Select(field string, fields ...string) *TaskResponseSelect {
	selector := &TaskResponseSelect{config: trq.config}
	selector.fields = append([]string{field}, fields...)
	selector.sql = trq.sqlQuery()
	return selector
}

func (trq *TaskResponseQuery) sqlAll(ctx context.Context) ([]*TaskResponse, error) {
	var (
		nodes       = []*TaskResponse{}
		withFKs     = trq.withFKs
		_spec       = trq.querySpec()
		loadedTypes = [2]bool{
			trq.withAuthor != nil,
			trq.withTask != nil,
		}
	)
	if trq.withAuthor != nil || trq.withTask != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, taskresponse.ForeignKeys...)
	}
	_spec.ScanValues = func() []interface{} {
		node := &TaskResponse{config: trq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		if withFKs {
			values = append(values, node.fkValues()...)
		}
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, trq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := trq.withAuthor; query != nil {
		ids := make([]uuid.UUID, 0, len(nodes))
		nodeids := make(map[uuid.UUID][]*TaskResponse)
		for i := range nodes {
			if fk := nodes[i].doctor_responses; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(doctor.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "doctor_responses" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Author = n
			}
		}
	}

	if query := trq.withTask; query != nil {
		ids := make([]uuid.UUID, 0, len(nodes))
		nodeids := make(map[uuid.UUID][]*TaskResponse)
		for i := range nodes {
			if fk := nodes[i].task_responses; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(task.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "task_responses" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Task = n
			}
		}
	}

	return nodes, nil
}

func (trq *TaskResponseQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := trq.querySpec()
	return sqlgraph.CountNodes(ctx, trq.driver, _spec)
}

func (trq *TaskResponseQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := trq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (trq *TaskResponseQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   taskresponse.Table,
			Columns: taskresponse.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: taskresponse.FieldID,
			},
		},
		From:   trq.sql,
		Unique: true,
	}
	if ps := trq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := trq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := trq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := trq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (trq *TaskResponseQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(trq.driver.Dialect())
	t1 := builder.Table(taskresponse.Table)
	selector := builder.Select(t1.Columns(taskresponse.Columns...)...).From(t1)
	if trq.sql != nil {
		selector = trq.sql
		selector.Select(selector.Columns(taskresponse.Columns...)...)
	}
	for _, p := range trq.predicates {
		p(selector)
	}
	for _, p := range trq.order {
		p(selector)
	}
	if offset := trq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := trq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TaskResponseGroupBy is the builder for group-by TaskResponse entities.
type TaskResponseGroupBy struct {
	config
	fields []string
	fns    []Aggregate
	// intermediate query.
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the group-by query.
func (trgb *TaskResponseGroupBy) Aggregate(fns ...Aggregate) *TaskResponseGroupBy {
	trgb.fns = append(trgb.fns, fns...)
	return trgb
}

// Scan applies the group-by query and scan the result into the given value.
func (trgb *TaskResponseGroupBy) Scan(ctx context.Context, v interface{}) error {
	return trgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (trgb *TaskResponseGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := trgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (trgb *TaskResponseGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(trgb.fields) > 1 {
		return nil, errors.New("ent: TaskResponseGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := trgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (trgb *TaskResponseGroupBy) StringsX(ctx context.Context) []string {
	v, err := trgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (trgb *TaskResponseGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(trgb.fields) > 1 {
		return nil, errors.New("ent: TaskResponseGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := trgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (trgb *TaskResponseGroupBy) IntsX(ctx context.Context) []int {
	v, err := trgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (trgb *TaskResponseGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(trgb.fields) > 1 {
		return nil, errors.New("ent: TaskResponseGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := trgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (trgb *TaskResponseGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := trgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (trgb *TaskResponseGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(trgb.fields) > 1 {
		return nil, errors.New("ent: TaskResponseGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := trgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (trgb *TaskResponseGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := trgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (trgb *TaskResponseGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := trgb.sqlQuery().Query()
	if err := trgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (trgb *TaskResponseGroupBy) sqlQuery() *sql.Selector {
	selector := trgb.sql
	columns := make([]string, 0, len(trgb.fields)+len(trgb.fns))
	columns = append(columns, trgb.fields...)
	for _, fn := range trgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(trgb.fields...)
}

// TaskResponseSelect is the builder for select fields of TaskResponse entities.
type TaskResponseSelect struct {
	config
	fields []string
	// intermediate queries.
	sql *sql.Selector
}

// Scan applies the selector query and scan the result into the given value.
func (trs *TaskResponseSelect) Scan(ctx context.Context, v interface{}) error {
	return trs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (trs *TaskResponseSelect) ScanX(ctx context.Context, v interface{}) {
	if err := trs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (trs *TaskResponseSelect) Strings(ctx context.Context) ([]string, error) {
	if len(trs.fields) > 1 {
		return nil, errors.New("ent: TaskResponseSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := trs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (trs *TaskResponseSelect) StringsX(ctx context.Context) []string {
	v, err := trs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (trs *TaskResponseSelect) Ints(ctx context.Context) ([]int, error) {
	if len(trs.fields) > 1 {
		return nil, errors.New("ent: TaskResponseSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := trs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (trs *TaskResponseSelect) IntsX(ctx context.Context) []int {
	v, err := trs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (trs *TaskResponseSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(trs.fields) > 1 {
		return nil, errors.New("ent: TaskResponseSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := trs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (trs *TaskResponseSelect) Float64sX(ctx context.Context) []float64 {
	v, err := trs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (trs *TaskResponseSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(trs.fields) > 1 {
		return nil, errors.New("ent: TaskResponseSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := trs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (trs *TaskResponseSelect) BoolsX(ctx context.Context) []bool {
	v, err := trs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (trs *TaskResponseSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := trs.sqlQuery().Query()
	if err := trs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (trs *TaskResponseSelect) sqlQuery() sql.Querier {
	selector := trs.sql
	selector.Select(selector.Columns(trs.fields...)...)
	return selector
}
