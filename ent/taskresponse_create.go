// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/google/uuid"
	"github.com/minskylab/asclepius/ent/doctor"
	"github.com/minskylab/asclepius/ent/task"
	"github.com/minskylab/asclepius/ent/taskresponse"
)

// TaskResponseCreate is the builder for creating a TaskResponse entity.
type TaskResponseCreate struct {
	config
	id           *uuid.UUID
	at           *time.Time
	lastChange   *time.Time
	observations *[]string
	meta         *[]string
	author       map[uuid.UUID]struct{}
	task         map[uuid.UUID]struct{}
}

// SetAt sets the at field.
func (trc *TaskResponseCreate) SetAt(t time.Time) *TaskResponseCreate {
	trc.at = &t
	return trc
}

// SetNillableAt sets the at field if the given value is not nil.
func (trc *TaskResponseCreate) SetNillableAt(t *time.Time) *TaskResponseCreate {
	if t != nil {
		trc.SetAt(*t)
	}
	return trc
}

// SetLastChange sets the lastChange field.
func (trc *TaskResponseCreate) SetLastChange(t time.Time) *TaskResponseCreate {
	trc.lastChange = &t
	return trc
}

// SetNillableLastChange sets the lastChange field if the given value is not nil.
func (trc *TaskResponseCreate) SetNillableLastChange(t *time.Time) *TaskResponseCreate {
	if t != nil {
		trc.SetLastChange(*t)
	}
	return trc
}

// SetObservations sets the observations field.
func (trc *TaskResponseCreate) SetObservations(s []string) *TaskResponseCreate {
	trc.observations = &s
	return trc
}

// SetMeta sets the meta field.
func (trc *TaskResponseCreate) SetMeta(s []string) *TaskResponseCreate {
	trc.meta = &s
	return trc
}

// SetID sets the id field.
func (trc *TaskResponseCreate) SetID(u uuid.UUID) *TaskResponseCreate {
	trc.id = &u
	return trc
}

// SetAuthorID sets the author edge to Doctor by id.
func (trc *TaskResponseCreate) SetAuthorID(id uuid.UUID) *TaskResponseCreate {
	if trc.author == nil {
		trc.author = make(map[uuid.UUID]struct{})
	}
	trc.author[id] = struct{}{}
	return trc
}

// SetAuthor sets the author edge to Doctor.
func (trc *TaskResponseCreate) SetAuthor(d *Doctor) *TaskResponseCreate {
	return trc.SetAuthorID(d.ID)
}

// SetTaskID sets the task edge to Task by id.
func (trc *TaskResponseCreate) SetTaskID(id uuid.UUID) *TaskResponseCreate {
	if trc.task == nil {
		trc.task = make(map[uuid.UUID]struct{})
	}
	trc.task[id] = struct{}{}
	return trc
}

// SetTask sets the task edge to Task.
func (trc *TaskResponseCreate) SetTask(t *Task) *TaskResponseCreate {
	return trc.SetTaskID(t.ID)
}

// Save creates the TaskResponse in the database.
func (trc *TaskResponseCreate) Save(ctx context.Context) (*TaskResponse, error) {
	if trc.at == nil {
		v := taskresponse.DefaultAt()
		trc.at = &v
	}
	if trc.lastChange == nil {
		v := taskresponse.DefaultLastChange()
		trc.lastChange = &v
	}
	if trc.observations == nil {
		return nil, errors.New("ent: missing required field \"observations\"")
	}
	if len(trc.author) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"author\"")
	}
	if trc.author == nil {
		return nil, errors.New("ent: missing required edge \"author\"")
	}
	if len(trc.task) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"task\"")
	}
	if trc.task == nil {
		return nil, errors.New("ent: missing required edge \"task\"")
	}
	return trc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (trc *TaskResponseCreate) SaveX(ctx context.Context) *TaskResponse {
	v, err := trc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (trc *TaskResponseCreate) sqlSave(ctx context.Context) (*TaskResponse, error) {
	var (
		tr    = &TaskResponse{config: trc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: taskresponse.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: taskresponse.FieldID,
			},
		}
	)
	if value := trc.id; value != nil {
		tr.ID = *value
		_spec.ID.Value = *value
	}
	if value := trc.at; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: taskresponse.FieldAt,
		})
		tr.At = *value
	}
	if value := trc.lastChange; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: taskresponse.FieldLastChange,
		})
		tr.LastChange = *value
	}
	if value := trc.observations; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  *value,
			Column: taskresponse.FieldObservations,
		})
		tr.Observations = *value
	}
	if value := trc.meta; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  *value,
			Column: taskresponse.FieldMeta,
		})
		tr.Meta = *value
	}
	if nodes := trc.author; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskresponse.AuthorTable,
			Columns: []string{taskresponse.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: doctor.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := trc.task; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskresponse.TaskTable,
			Columns: []string{taskresponse.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: task.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, trc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return tr, nil
}
