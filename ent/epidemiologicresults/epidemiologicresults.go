// Code generated by entc, DO NOT EDIT.

package epidemiologicresults

import (
	"github.com/minskylab/asclepius/ent/schema"
)

const (
	// Label holds the string label denoting the epidemiologicresults type in the database.
	Label = "epidemiologic_results"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldVisitedPlaces holds the string denoting the visitedplaces vertex property in the database.
	FieldVisitedPlaces = "visited_places"
	// FieldInfectedFamily holds the string denoting the infectedfamily vertex property in the database.
	FieldInfectedFamily = "infected_family"
	// FieldFromInfectedPlace holds the string denoting the frominfectedplace vertex property in the database.
	FieldFromInfectedPlace = "from_infected_place"
	// FieldToInfectedPlace holds the string denoting the toinfectedplace vertex property in the database.
	FieldToInfectedPlace = "to_infected_place"

	// Table holds the table name of the epidemiologicresults in the database.
	Table = "epidemiologic_results"
	// TestTable is the table the holds the test relation/edge.
	TestTable = "epidemiologic_results"
	// TestInverseTable is the table name for the Test entity.
	// It exists in this package in order to avoid circular dependency with the "test" package.
	TestInverseTable = "tests"
	// TestColumn is the table column denoting the test relation/edge.
	TestColumn = "test_epidemiologic"
)

// Columns holds all SQL columns for epidemiologicresults fields.
var Columns = []string{
	FieldID,
	FieldVisitedPlaces,
	FieldInfectedFamily,
	FieldFromInfectedPlace,
	FieldToInfectedPlace,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the EpidemiologicResults type.
var ForeignKeys = []string{
	"test_epidemiologic",
}

var (
	fields = schema.EpidemiologicResults{}.Fields()

	// descFromInfectedPlace is the schema descriptor for fromInfectedPlace field.
	descFromInfectedPlace = fields[3].Descriptor()
	// FromInfectedPlaceValidator is a validator for the "fromInfectedPlace" field. It is called by the builders before save.
	FromInfectedPlaceValidator = func() func(int) error {
		validators := descFromInfectedPlace.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(fromInfectedPlace int) error {
			for _, fn := range fns {
				if err := fn(fromInfectedPlace); err != nil {
					return err
				}
			}
			return nil
		}
	}()

	// descToInfectedPlace is the schema descriptor for toInfectedPlace field.
	descToInfectedPlace = fields[4].Descriptor()
	// ToInfectedPlaceValidator is a validator for the "toInfectedPlace" field. It is called by the builders before save.
	ToInfectedPlaceValidator = func() func(int) error {
		validators := descToInfectedPlace.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(toInfectedPlace int) error {
			for _, fn := range fns {
				if err := fn(toInfectedPlace); err != nil {
					return err
				}
			}
			return nil
		}
	}()
)
