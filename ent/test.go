// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"github.com/google/uuid"
	"github.com/minskylab/asclepius/ent/history"
	"github.com/minskylab/asclepius/ent/test"
)

// Test is the model entity for the Test schema.
type Test struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Notes holds the value of the "notes" field.
	Notes []string `json:"notes,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TestQuery when eager-loading is set.
	Edges         TestEdges `json:"edges"`
	history_tests *uuid.UUID
}

// TestEdges holds the relations/edges for other nodes in the graph.
type TestEdges struct {
	// History holds the value of the history edge.
	History *History
	// Clinical holds the value of the clinical edge.
	Clinical []*ClinicalResults
	// Epidemiologic holds the value of the epidemiologic edge.
	Epidemiologic []*EpidemiologicResults
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// HistoryOrErr returns the History value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TestEdges) HistoryOrErr() (*History, error) {
	if e.loadedTypes[0] {
		if e.History == nil {
			// The edge history was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: history.Label}
		}
		return e.History, nil
	}
	return nil, &NotLoadedError{edge: "history"}
}

// ClinicalOrErr returns the Clinical value or an error if the edge
// was not loaded in eager-loading.
func (e TestEdges) ClinicalOrErr() ([]*ClinicalResults, error) {
	if e.loadedTypes[1] {
		return e.Clinical, nil
	}
	return nil, &NotLoadedError{edge: "clinical"}
}

// EpidemiologicOrErr returns the Epidemiologic value or an error if the edge
// was not loaded in eager-loading.
func (e TestEdges) EpidemiologicOrErr() ([]*EpidemiologicResults, error) {
	if e.loadedTypes[2] {
		return e.Epidemiologic, nil
	}
	return nil, &NotLoadedError{edge: "epidemiologic"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Test) scanValues() []interface{} {
	return []interface{}{
		&uuid.UUID{}, // id
		&[]byte{},    // notes
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Test) fkValues() []interface{} {
	return []interface{}{
		&uuid.UUID{}, // history_tests
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Test fields.
func (t *Test) assignValues(values ...interface{}) error {
	if m, n := len(values), len(test.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	if value, ok := values[0].(*uuid.UUID); !ok {
		return fmt.Errorf("unexpected type %T for field id", values[0])
	} else if value != nil {
		t.ID = *value
	}
	values = values[1:]

	if value, ok := values[0].(*[]byte); !ok {
		return fmt.Errorf("unexpected type %T for field notes", values[0])
	} else if value != nil && len(*value) > 0 {
		if err := json.Unmarshal(*value, &t.Notes); err != nil {
			return fmt.Errorf("unmarshal field notes: %v", err)
		}
	}
	values = values[1:]
	if len(values) == len(test.ForeignKeys) {
		if value, ok := values[0].(*uuid.UUID); !ok {
			return fmt.Errorf("unexpected type %T for field history_tests", values[0])
		} else if value != nil {
			t.history_tests = value
		}
	}
	return nil
}

// QueryHistory queries the history edge of the Test.
func (t *Test) QueryHistory() *HistoryQuery {
	return (&TestClient{config: t.config}).QueryHistory(t)
}

// QueryClinical queries the clinical edge of the Test.
func (t *Test) QueryClinical() *ClinicalResultsQuery {
	return (&TestClient{config: t.config}).QueryClinical(t)
}

// QueryEpidemiologic queries the epidemiologic edge of the Test.
func (t *Test) QueryEpidemiologic() *EpidemiologicResultsQuery {
	return (&TestClient{config: t.config}).QueryEpidemiologic(t)
}

// Update returns a builder for updating this Test.
// Note that, you need to call Test.Unwrap() before calling this method, if this Test
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Test) Update() *TestUpdateOne {
	return (&TestClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (t *Test) Unwrap() *Test {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Test is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Test) String() string {
	var builder strings.Builder
	builder.WriteString("Test(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", notes=")
	builder.WriteString(fmt.Sprintf("%v", t.Notes))
	builder.WriteByte(')')
	return builder.String()
}

// Tests is a parsable slice of Test.
type Tests []*Test

func (t Tests) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
