// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/google/uuid"
	"github.com/minskylab/asclepius/ent/epidemiologicresults"
	"github.com/minskylab/asclepius/ent/test"
)

// EpidemiologicResultsCreate is the builder for creating a EpidemiologicResults entity.
type EpidemiologicResultsCreate struct {
	config
	id                *uuid.UUID
	visitedPlaces     *[]string
	infectedFamily    *bool
	fromInfectedPlace *int
	toInfectedPlace   *int
	test              map[uuid.UUID]struct{}
}

// SetVisitedPlaces sets the visitedPlaces field.
func (erc *EpidemiologicResultsCreate) SetVisitedPlaces(s []string) *EpidemiologicResultsCreate {
	erc.visitedPlaces = &s
	return erc
}

// SetInfectedFamily sets the infectedFamily field.
func (erc *EpidemiologicResultsCreate) SetInfectedFamily(b bool) *EpidemiologicResultsCreate {
	erc.infectedFamily = &b
	return erc
}

// SetNillableInfectedFamily sets the infectedFamily field if the given value is not nil.
func (erc *EpidemiologicResultsCreate) SetNillableInfectedFamily(b *bool) *EpidemiologicResultsCreate {
	if b != nil {
		erc.SetInfectedFamily(*b)
	}
	return erc
}

// SetFromInfectedPlace sets the fromInfectedPlace field.
func (erc *EpidemiologicResultsCreate) SetFromInfectedPlace(i int) *EpidemiologicResultsCreate {
	erc.fromInfectedPlace = &i
	return erc
}

// SetNillableFromInfectedPlace sets the fromInfectedPlace field if the given value is not nil.
func (erc *EpidemiologicResultsCreate) SetNillableFromInfectedPlace(i *int) *EpidemiologicResultsCreate {
	if i != nil {
		erc.SetFromInfectedPlace(*i)
	}
	return erc
}

// SetToInfectedPlace sets the toInfectedPlace field.
func (erc *EpidemiologicResultsCreate) SetToInfectedPlace(i int) *EpidemiologicResultsCreate {
	erc.toInfectedPlace = &i
	return erc
}

// SetNillableToInfectedPlace sets the toInfectedPlace field if the given value is not nil.
func (erc *EpidemiologicResultsCreate) SetNillableToInfectedPlace(i *int) *EpidemiologicResultsCreate {
	if i != nil {
		erc.SetToInfectedPlace(*i)
	}
	return erc
}

// SetID sets the id field.
func (erc *EpidemiologicResultsCreate) SetID(u uuid.UUID) *EpidemiologicResultsCreate {
	erc.id = &u
	return erc
}

// SetTestID sets the test edge to Test by id.
func (erc *EpidemiologicResultsCreate) SetTestID(id uuid.UUID) *EpidemiologicResultsCreate {
	if erc.test == nil {
		erc.test = make(map[uuid.UUID]struct{})
	}
	erc.test[id] = struct{}{}
	return erc
}

// SetNillableTestID sets the test edge to Test by id if the given value is not nil.
func (erc *EpidemiologicResultsCreate) SetNillableTestID(id *uuid.UUID) *EpidemiologicResultsCreate {
	if id != nil {
		erc = erc.SetTestID(*id)
	}
	return erc
}

// SetTest sets the test edge to Test.
func (erc *EpidemiologicResultsCreate) SetTest(t *Test) *EpidemiologicResultsCreate {
	return erc.SetTestID(t.ID)
}

// Save creates the EpidemiologicResults in the database.
func (erc *EpidemiologicResultsCreate) Save(ctx context.Context) (*EpidemiologicResults, error) {
	if erc.fromInfectedPlace != nil {
		if err := epidemiologicresults.FromInfectedPlaceValidator(*erc.fromInfectedPlace); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"fromInfectedPlace\": %v", err)
		}
	}
	if erc.toInfectedPlace != nil {
		if err := epidemiologicresults.ToInfectedPlaceValidator(*erc.toInfectedPlace); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"toInfectedPlace\": %v", err)
		}
	}
	if len(erc.test) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"test\"")
	}
	return erc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (erc *EpidemiologicResultsCreate) SaveX(ctx context.Context) *EpidemiologicResults {
	v, err := erc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (erc *EpidemiologicResultsCreate) sqlSave(ctx context.Context) (*EpidemiologicResults, error) {
	var (
		er    = &EpidemiologicResults{config: erc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: epidemiologicresults.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: epidemiologicresults.FieldID,
			},
		}
	)
	if value := erc.id; value != nil {
		er.ID = *value
		_spec.ID.Value = *value
	}
	if value := erc.visitedPlaces; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  *value,
			Column: epidemiologicresults.FieldVisitedPlaces,
		})
		er.VisitedPlaces = *value
	}
	if value := erc.infectedFamily; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  *value,
			Column: epidemiologicresults.FieldInfectedFamily,
		})
		er.InfectedFamily = *value
	}
	if value := erc.fromInfectedPlace; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: epidemiologicresults.FieldFromInfectedPlace,
		})
		er.FromInfectedPlace = *value
	}
	if value := erc.toInfectedPlace; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: epidemiologicresults.FieldToInfectedPlace,
		})
		er.ToInfectedPlace = *value
	}
	if nodes := erc.test; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   epidemiologicresults.TestTable,
			Columns: []string{epidemiologicresults.TestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: test.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, erc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return er, nil
}
