// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/minskylab/asclepius/ent/doctor"
	"github.com/minskylab/asclepius/ent/task"
	"github.com/minskylab/asclepius/ent/taskresponse"
)

// TaskResponse is the model entity for the TaskResponse schema.
type TaskResponse struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// At holds the value of the "at" field.
	At time.Time `json:"at,omitempty"`
	// LastChange holds the value of the "lastChange" field.
	LastChange time.Time `json:"lastChange,omitempty"`
	// Observations holds the value of the "observations" field.
	Observations []string `json:"observations,omitempty"`
	// Meta holds the value of the "meta" field.
	Meta []string `json:"meta,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TaskResponseQuery when eager-loading is set.
	Edges            TaskResponseEdges `json:"edges"`
	doctor_responses *uuid.UUID
	task_responses   *uuid.UUID
}

// TaskResponseEdges holds the relations/edges for other nodes in the graph.
type TaskResponseEdges struct {
	// Author holds the value of the author edge.
	Author *Doctor
	// Task holds the value of the task edge.
	Task *Task
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// AuthorOrErr returns the Author value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TaskResponseEdges) AuthorOrErr() (*Doctor, error) {
	if e.loadedTypes[0] {
		if e.Author == nil {
			// The edge author was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: doctor.Label}
		}
		return e.Author, nil
	}
	return nil, &NotLoadedError{edge: "author"}
}

// TaskOrErr returns the Task value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TaskResponseEdges) TaskOrErr() (*Task, error) {
	if e.loadedTypes[1] {
		if e.Task == nil {
			// The edge task was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: task.Label}
		}
		return e.Task, nil
	}
	return nil, &NotLoadedError{edge: "task"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TaskResponse) scanValues() []interface{} {
	return []interface{}{
		&uuid.UUID{},    // id
		&sql.NullTime{}, // at
		&sql.NullTime{}, // lastChange
		&[]byte{},       // observations
		&[]byte{},       // meta
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*TaskResponse) fkValues() []interface{} {
	return []interface{}{
		&uuid.UUID{}, // doctor_responses
		&uuid.UUID{}, // task_responses
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TaskResponse fields.
func (tr *TaskResponse) assignValues(values ...interface{}) error {
	if m, n := len(values), len(taskresponse.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	if value, ok := values[0].(*uuid.UUID); !ok {
		return fmt.Errorf("unexpected type %T for field id", values[0])
	} else if value != nil {
		tr.ID = *value
	}
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field at", values[0])
	} else if value.Valid {
		tr.At = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field lastChange", values[1])
	} else if value.Valid {
		tr.LastChange = value.Time
	}

	if value, ok := values[2].(*[]byte); !ok {
		return fmt.Errorf("unexpected type %T for field observations", values[2])
	} else if value != nil && len(*value) > 0 {
		if err := json.Unmarshal(*value, &tr.Observations); err != nil {
			return fmt.Errorf("unmarshal field observations: %v", err)
		}
	}

	if value, ok := values[3].(*[]byte); !ok {
		return fmt.Errorf("unexpected type %T for field meta", values[3])
	} else if value != nil && len(*value) > 0 {
		if err := json.Unmarshal(*value, &tr.Meta); err != nil {
			return fmt.Errorf("unmarshal field meta: %v", err)
		}
	}
	values = values[4:]
	if len(values) == len(taskresponse.ForeignKeys) {
		if value, ok := values[0].(*uuid.UUID); !ok {
			return fmt.Errorf("unexpected type %T for field doctor_responses", values[0])
		} else if value != nil {
			tr.doctor_responses = value
		}
		if value, ok := values[0].(*uuid.UUID); !ok {
			return fmt.Errorf("unexpected type %T for field task_responses", values[0])
		} else if value != nil {
			tr.task_responses = value
		}
	}
	return nil
}

// QueryAuthor queries the author edge of the TaskResponse.
func (tr *TaskResponse) QueryAuthor() *DoctorQuery {
	return (&TaskResponseClient{config: tr.config}).QueryAuthor(tr)
}

// QueryTask queries the task edge of the TaskResponse.
func (tr *TaskResponse) QueryTask() *TaskQuery {
	return (&TaskResponseClient{config: tr.config}).QueryTask(tr)
}

// Update returns a builder for updating this TaskResponse.
// Note that, you need to call TaskResponse.Unwrap() before calling this method, if this TaskResponse
// was returned from a transaction, and the transaction was committed or rolled back.
func (tr *TaskResponse) Update() *TaskResponseUpdateOne {
	return (&TaskResponseClient{config: tr.config}).UpdateOne(tr)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (tr *TaskResponse) Unwrap() *TaskResponse {
	tx, ok := tr.config.driver.(*txDriver)
	if !ok {
		panic("ent: TaskResponse is not a transactional entity")
	}
	tr.config.driver = tx.drv
	return tr
}

// String implements the fmt.Stringer.
func (tr *TaskResponse) String() string {
	var builder strings.Builder
	builder.WriteString("TaskResponse(")
	builder.WriteString(fmt.Sprintf("id=%v", tr.ID))
	builder.WriteString(", at=")
	builder.WriteString(tr.At.Format(time.ANSIC))
	builder.WriteString(", lastChange=")
	builder.WriteString(tr.LastChange.Format(time.ANSIC))
	builder.WriteString(", observations=")
	builder.WriteString(fmt.Sprintf("%v", tr.Observations))
	builder.WriteString(", meta=")
	builder.WriteString(fmt.Sprintf("%v", tr.Meta))
	builder.WriteByte(')')
	return builder.String()
}

// TaskResponses is a parsable slice of TaskResponse.
type TaskResponses []*TaskResponse

func (tr TaskResponses) config(cfg config) {
	for _i := range tr {
		tr[_i].config = cfg
	}
}
